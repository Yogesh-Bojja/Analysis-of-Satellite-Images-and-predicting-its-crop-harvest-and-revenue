/*global jQuery*/
/**
 * business-qld
 * Global JS
 *
 * version: 0.0.1
 * file:    global.js
 * author:  Squiz Australia
 * change log:
 *     Fri Oct 21 2016 09:11:50 GMT+1000 (AEST) - First revision
 */

/*
 * Table of Contents
 *
 * - Global
 * - Modules

 */
'use strict';
/*
--------------------
Global
--------------------
*/
//  Declare JS Enabled.
$('body').removeClass('no-js').addClass('js-enabled');

var busq = {
	fn: {},
	vars: {}
};

// Setting the Regions within Queensland as used by Business Queensland
busq.vars.regions = ['All', 'Central Queensland', 'Central West Queensland',
                    'Darling Downs', 'Far North Queensland', 'North Queensland',
                    'North West Queensland', 'South East Queensland',
                    'South West Queensland', 'Wide Bay-Burnett'];

// Setting a global check to identify which viewport is active
var responsive = $('#responsive').css('z-index');


/*
--------------------
Modules
--------------------
*/

(function($){
    'use strict';

    if($('.content__tile-form-datepicker').length > 0){
        $('.content__tile-form-datepicker').datepicker();
    }
}(jQuery));


/*----------------------------START: Customise the site script ------------------------------------------------*/

(function($){
    'use strict';

    busq.fn.reSize = debounce(function(){
	    busq.fn.determineWidth();

	    if( $('.landing-accordion').length > 0){
	        busq.fn.resetLandingAccordion();
	    }
    },250);

    $(window).resize(function () {
	    busq.fn.reSize();
	});

    // determine width - 0 = mobile, 1 = tablet, 2 = desktop
    busq.fn.determineWidth = function(){
        var element = document.getElementById('resChecker');
        var z;
        var style;
        if (typeof (lteIE8) === "undefined") {
            if (typeof (window.getComputedStyle) === "undefined") {
                z = parseInt(element.currentStyle['z-index']);
            } else{
                style = window.getComputedStyle(element, "");
                z = parseInt(style.getPropertyValue('z-index'));
            }
        } else {
            // ie8 or lower so set to desktop only
            z = 3;
        }
        return z;
    }

    busq.fn.discoverShowRegionQuestion = function(event){
        var target = $('#q3143_q4_0');
        var question = $('.discover-question--region');

        if(target.prop('checked')){
            question.slideDown(400);
        } else {
            question.slideUp(400);
        }
    };

    busq.fn.captureABLIS = function(){
        var industryField = $('#q3143_q1');
        var ablisDataField = $('#ablisdata');
        var industries = ablisDataField.val();

        industryField.attr('value', industries);
    };

    busq.fn.captureSubmissionData = function(event){
        busq.fn.captureABLIS();
        busq.fn.saveDiscoverChoices();
    };

    $('body').on('change', '.discover-question--location input', busq.fn.discoverShowRegionQuestion);
    $('body').on('submit', '.discover__form form', busq.fn.captureSubmissionData);
}(jQuery));

(function($){
    'use strict';

    /* Form overrides */

    // Style changes for Matrix Custom Forms default output
    busq.fn.formOverrides = function(){
        var selectFields = $('select[multiple=multiple]');
        var dayFields = $('[id$=_value_d]');
        var monthFields = $('[id$=_value_m]');
        var yearFields = $('[id$=_value_y]');
        var hourFields = $('[id$=_value_h]');
        var minuteFields = $('[id$=_value_i]');
        var secondFields = $('[id$=_value_s]');

        // Remove select arrow from multiselect input
        if(selectFields.length > 0){
            selectFields.each(function(key, val){
                $(val).parents('.sq-form-question').addClass('sq-form-question-select-multiple');
            });
        }

        // Wrap date elements in containers
        var dateClassInput = 'sq-form-question-date';
        var dateClassSelect = 'sq-form-question-date sq-form-question-date-select';

        if(dayFields.length > 0){
            dayFields.each(function(key, val){
                if($(val).is('input')){
                    $(val).prev().addBack().wrapAll('<div class="' + dateClassInput + '"/>');
                } else {
                    $(val).prev().addBack().wrapAll('<div class="' + dateClassSelect + '"/>');
                }

                $(val).wrap('<div class="sq-form-question-answer" />');
            });
        }

        if(monthFields.length > 0){
            monthFields.each(function(key, val){
                if($(val).is('input')){
                    $(val).prev().addBack().wrapAll('<div class="' + dateClassInput + '"/>');
                } else {
                    $(val).prev().addBack().wrapAll('<div class="' + dateClassSelect + '"/>');
                }

                $(val).wrap('<div class="sq-form-question-answer" />');
            });
        }

        if(yearFields.length > 0){
            yearFields.each(function(key, val){
                if($(val).is('input')){
                    $(val).prev().addBack().wrapAll('<div class="' + dateClassInput + '"/>');
                } else {
                    $(val).prev().addBack().wrapAll('<div class="' + dateClassSelect + ' sq-form-question-date-select-year"/>');
                }

                $(val).wrap('<div class="sq-form-question-answer" />');

                // Add clearing div for d/m/y h/m/s format
                $(val).parents('.sq-form-question-date-select-year').after('<div class="date-separator"></div>');
            });
        }

        if(hourFields.length > 0){
            hourFields.each(function(key, val){
                if($(val).is('input')){
                    $(val).prev().addBack().wrapAll('<div class="' + dateClassInput + '"/>');
                } else {
                    $(val).prev().addBack().wrapAll('<div class="' + dateClassSelect + '"/>');
                }

                $(val).wrap('<div class="sq-form-question-answer" />');
            });
        }

        if(minuteFields.length > 0){
            minuteFields.each(function(key, val){
                if($(val).is('input')){
                    $(val).prev().addBack().wrapAll('<div class="' + dateClassInput + '"/>');
                } else {
                    $(val).prev().addBack().wrapAll('<div class="' + dateClassSelect + '"/>');
                }

                $(val).wrap('<div class="sq-form-question-answer" />');
            });
        }

        if(secondFields.length > 0){
            secondFields.each(function(key, val){
                if($(val).is('input')){
                    $(val).prev().addBack().wrapAll('<div class="' + dateClassInput + '"/>');
                } else {
                    $(val).prev().addBack().wrapAll('<div class="' + dateClassSelect + '"/>');
                }

                $(val).wrap('<div class="sq-form-question-answer" />');
            });
        }
    };

    // Load the feedback form
    busq.fn.feedbackFormModal = function() {
        $('.feedbackModal').click(function() {
            var targeturl = $(this).data('targeturl');
            var modalWrapper = $('#feedbackForm').find('.modal-body');
            modalWrapper.load(targeturl, function() {
                modalWrapper.addClass('in');
            });
        });
    };
  

    if($('form').length > 0){
        busq.fn.formOverrides();
    }



    busq.fn.feedbackFormModal();
}(jQuery));
(function($){
    'use strict';


}(jQuery));
(function($){
    'use strict';
    
    busq.fn.modalPDDPrevNext = function(){
        var currentModal = $('#pddModal');
        var currentImage;
        
        var showHideButtons = function(current){
            if(current.hasClass('carousel-first')){
                currentModal.find('.btn-prev').hide();
            }else{
                currentModal.find('.btn-prev').show();
            }
            
            if(current.hasClass('carousel-last')){
                currentModal.find('.btn-next').hide();
            }else{
                currentModal.find('.btn-next').show();
            }
        }
    
        $('.species-carousel-item').click(function(){
            $('.species-carousel-item').each(function(){
                $(this).removeClass('modalActive');
            });
           $('.species-carousel-item.modalActive').removeClass('modalActive');
           $(this).addClass('modalActive');
           showHideButtons($(this));
        }); 
        
        
        
        var removeActive = function(){
            $('.species-carousel-item').each(function(){
                $(this).removeClass('modalActive');
            });
        }
        
        currentModal.find('.btn-next').click(function(){
            currentImage = $('.species-carousel-item.modalActive');
            if(currentImage){
                var nextImage = currentImage.closest(".species-carousel-item").next(".species-carousel-item");
                var targeturl = currentImage.closest(".species-carousel-item").next(".species-carousel-item").data('targeturl');
                if(nextImage.length){
                    removeActive();
                    nextImage.addClass('modalActive');
                    showHideButtons(nextImage);
                    var modalBody = currentModal.find('.modal-body');
                    modalBody.load(targeturl, function() {
                        currentModal.addClass('in');
                        showHideButtons(nextImage);
                    });
                }
            }
        });
          
        //click prev
        currentModal.find('.btn-prev').click(function(){
            currentImage = $('.species-carousel-item.modalActive');
            if(currentImage){
                var nextImage = currentImage.closest(".species-carousel-item").prev(".species-carousel-item");
                var targeturl = currentImage.closest(".species-carousel-item").prev(".species-carousel-item").data('targeturl');
                if(nextImage.length){
                    removeActive();
                    nextImage.addClass('modalActive');
                    showHideButtons(nextImage);
                    var modalBody = currentModal.find('.modal-body');
                    modalBody.load(targeturl, function() {
                        currentModal.addClass('in');
                        showHideButtons(nextImage);
                    });
                }
            }
        });
        currentModal.find('.btn-wrapper').hover(function() {
            $(this).children('button').fadeTo(1,1);
        },function() {
            $(this).children('button').fadeTo(1,0);
        });
    }    
    
    if($('.speciescarousel').length > 0){
        busq.fn.modalPDDPrevNext();
    }
    
    

}(jQuery));
(function($){
    'use strict';

    // Pause and play the carousel
    busq.fn.toggleCarouselState = function(event){
        var target = $(event.target);
        var carousel = $('#busq-carousel');

        if(target.hasClass('fa-pause')){
            carousel.carousel("pause");
            target.removeClass('fa-pause');
            target.addClass('fa-play');
        } else {
            carousel.carousel("cycle");
            target.removeClass('fa-play');
            target.addClass('fa-pause');
        }

        return false;
    }

    $('body').on('click', '.carousel__state', busq.fn.toggleCarouselState);
}(jQuery));
(function($){
    'use strict';


}(jQuery));
(function($){
    'use strict';


}(jQuery));
(function($){
    'use strict';

    // Toggle the main navigation's submenus
    busq.fn.footerMenuToggle = function(event){
        var target = $(event.target);
        var wrapper = target.parents('.footer__navigation-list-item');
        var submenu = wrapper.find('ul');

        // If on mobile
        if($('#responsive').css('z-index') === '1'){
            // If there is a submenu, deactivate the link
            if(submenu.length !== 0){
                // Show or hide mobile menu with active class
                if(wrapper.hasClass('active--footer-navigation')){
                    submenu.slideUp(200);
                    wrapper.removeClass('active--footer-navigation');
                } else {
                    submenu.slideDown(200);
                    wrapper.addClass('active--footer-navigation');
                }

                return false;
            }
        }
    };

    // Separate content into multiple lists
    busq.fn.splitListContent = function(element, number, extras){
        var wrapper = $(element);
        var sublist = wrapper.find('ul');
        var items = sublist.children();
        var itemsRemaining = items.length;
        var listsRemaining = number;
        var listCounter = 0;
        var itemsPerList = 0;

        var listClass;
        var itemCounter;
        var item;
        var dynamicListsWrapper;
        var dynamicLists;

        // Set up the container for the new lists
        wrapper.append($('<div class="dynamic-lists__wrapper"></div>'));
        wrapper.attr('data-dynamic-lists', number);

        // Preserve the class of the list
        listClass = sublist.attr('class');

        // Iterate over the number of columns
        while(listsRemaining > 0){
            // Create a new list
            dynamicListsWrapper = wrapper.find('.dynamic-lists__wrapper');
            dynamicListsWrapper.append($('<ul class="' + listClass + ' ' + extras + ' list--' + listCounter + '"></ul>'));

            // Set up the counters
            itemsPerList = Math.ceil(itemsRemaining / listsRemaining);
            itemCounter = 0;

            // Populate the dynamic list
            while(itemCounter < itemsPerList){
                item = $(items.eq(itemCounter));
                item.appendTo(dynamicListsWrapper.find('.list--' + listCounter));
                itemCounter++;
            }

            // Update the stored list reference for the next iteration
            sublist = wrapper.find('> ul');
            items = sublist.children();
            itemsRemaining = items.length;
            listsRemaining--;
            listCounter++;
        }

        // Replace the original list with the new lists
        dynamicLists = wrapper.find('.dynamic-lists__wrapper').detach();
        wrapper.find('ul').remove();
        wrapper.append(dynamicLists.html());
    };

    // Split out footer lists into multiples
    if($('.footer__navigation-list').length > 0){
        busq.fn.splitListContent('.footer__navigation-list-item.col-md-6 .footer__navigation-links', 2, 'col-md-6');
    }

    // QLD Government Other Languages switcher
    var b = ['<span lang="ar" xml:lang="ar">العربية</span>', '<span lang="el" xml:lang="el">Ελληνικά</span>', '<span lang="pl" xml:lang="pl">Polski</span>', '<span lang="bs" xml:lang="bs">Bosanksi</span>', '<span lang="id" xml:lang="id">Bahasa Indonesia</span>', '<span lang="ru" xml:lang="ru">Русский</span>', '<span lang="zh" xml:lang="zh">中文</span>', '<span lang="it" xml:lang="it">Italiano</span>', '<span lang="sr" xml:lang="sr">српски</span>', '<span lang="hr" xml:lang="hr">Hrvatski</span>', '<span lang="ja" xml:lang="ja">日本語</span>', '<span lang="es" xml:lang="es">Español</span>', '<span lang="fr" xml:lang="fr">Français</span>', '<span lang="ko" xml:lang="ko">한국어</span>', '<span lang="tl" xml:lang="tl">Tagalog</span>', '<span lang="de" xml:lang="de">Deutsch</span>', '<span lang="fa" xml:lang="fa">فارسی</span>', '<span lang="vi" xml:lang="vi">Tiếng Việt</span>'],
        c = function c() {
        $('#other-languages a').empty().append(b[Math.floor(Math.random() * b.length)] + ' (Other languages)'), setTimeout(c, 5e3);
    };
    c();

    $('body').on('click', '.footer__navigation-title a', busq.fn.footerMenuToggle);
}(jQuery));
(function($){
    'use strict';


}(jQuery));
(function($){
    'use strict';

    // Toggle the mobile search and hide mobile menu
    busq.fn.mobileSearchToggle = function(event){
        responsive = $('#responsive').css('z-index');

        // If you're on a mobile or tablet viewport
        if(responsive !== '3'){
            var target = $(event.target);
            var wrapper = $('.header__navigation');
            var form = $('.header__mobile-search');
            var menu = $('.header__navigation--list');

            // Show or hide mobile search with active class
            if(wrapper.hasClass('active--mobile-search')){
                form.slideUp(200);
                wrapper.removeClass('active--mobile-search');
            } else {
                form.slideDown(200);
                wrapper.addClass('active--mobile-search');
            }

            // Hide menu if it is showing
            if(wrapper.hasClass('active--mobile-navigation')){
                menu.slideUp(150);
                wrapper.removeClass('active--mobile-navigation');
            }

            return false;
        }
    };

    // Toggle the mobile menu and hide mobile search
    busq.fn.mobileMenuToggle = function(event){
        var target = $(event.target);
        var wrapper = $('.header__navigation');
        var menu = $('.header__navigation--list');
        var form = $('.header__mobile-search');

        // Show or hide mobile menu with active class
        if(wrapper.hasClass('active--mobile-navigation')){
            menu.slideUp(200);
            wrapper.removeClass('active--mobile-navigation');
        } else {
            menu.slideDown(200);
            wrapper.addClass('active--mobile-navigation');
        }

        // Hide search form if it is showing
        if(wrapper.hasClass('active--mobile-search')){
            form.slideUp(150);
            wrapper.removeClass('active--mobile-search');
        }

        return false;
    };

    // Toggle the main navigation's submenus
    busq.fn.mobileSubmenuToggle = function(event){
        var target = $(event.target);
        var wrapper = target.parent();
        var submenu = wrapper.find('ul');
        responsive = $('#responsive').css('z-index');

        // If there is a submenu, deactivate the link
        // If you're on a mobile viewport
        if(submenu.length !== 0 && responsive !== '3'){
            // Show or hide mobile menu with active class
            if(wrapper.hasClass('active--mobile-submenu')){
                submenu.slideUp(200);
                wrapper.removeClass('active--mobile-submenu');
            } else {
                submenu.slideDown(200);
                wrapper.addClass('active--mobile-submenu');
            }

            return false;
        }
    };

    $('body').on('click', '.header__mobile-icon--search a', busq.fn.mobileSearchToggle);
    $('body').on('click', '.header__mobile-icon--menu a', busq.fn.mobileMenuToggle);

    $('body').on('click', '.header__navigation--list-item a', busq.fn.mobileSubmenuToggle);
}(jQuery));
(function($){
    'use strict';

    // Move left navigation to the bottom of the content on mobile
    // Move it back if needed off mobile
    busq.fn.arrangeSideNavigation = function(){
        var leftNav = $('.content__navigation').detach();

        responsive = $('#responsive').css('z-index');

        // If on mobile or tablet
        if(responsive !== '3'){
            $('.content-wrapper').append(leftNav);
        } else {
            $('.content-wrapper').prepend(leftNav);
        }

    };
}(jQuery));
(function($){
    'use strict';

    // Make all home tiles the same height
    busq.fn.homeTilesAdjustHeight = function() {
        var tiles = $('.home__tiles .content__tile');
        var tileBodies = $('.home__tiles .content__tile-body');
        var headHeight = $('.home__tiles .content__tile-head').innerHeight();
        var footHeight = $('.home__tiles .content__tile-foot').innerHeight();
        var tileHeight = 0;
        var bodyHeight = 0;
        var current = 0;
        var tallestHasFoot = false;

        // Determine the tallest tile
        tiles.each(function(key, val){
            current = $(val).innerHeight();

            if(current > tileHeight){
                tileHeight = current;

                if($(val).find('.content__tile-foot').length === 1){
                    tallestHasFoot = true;
                    bodyHeight = $(val).find('.content__tile-body').innerHeight() + footHeight;
                } else {
                    tallestHasFoot = false;
                    bodyHeight = $(val).find('.content__tile-body').innerHeight();
                }
            }
        });

        // Adjust heights
        tiles.each(function(key, val){
            var body = $(val).find('.content__tile-body');
            var foot = $(val).find('.content__tile-foot');

            // Remove added footer height if current tile has one
            if(foot.length === 1){
                body.css('height', bodyHeight - footHeight + 'px');
            } else {
                body.css('height', bodyHeight + 'px');
            }
        });
    };

    // Make all home feature tiles the same height
    busq.fn.homeFeaturesAdjustHeight = function() {
        var features = $('.home__feature-container');
        var featureThumbnailHeight = $('.home__feature-thumbnail').height();
        var discoverThumbnailHeight = $('.personalise__image').height();
        var discoverTileHeight = $('.personalise__wrapper').height();
        var tallestElement;
        var tallestHeight = 0;
        var current;
        var targetHeightForFeature;
        var targetHeightForDiscover;
        var finalHeightForFeature;
        var finalHeightForDiscover;

        // Reset any previous styling
        $('.home__feature-content').attr('style', '');
        $('.personalise__image').css('height', '');

        // Determine the tallest feature
        features.each(function(key, val){
            current = $(val).innerHeight();

            if(current > tallestHeight){
                tallestHeight = current;
                tallestElement = $(val);
            }
        });

        // Check if tallest element is a feature tile or the discover tile
        if(tallestElement.has('.home__feature-content').length > 0){
            // Feature is tallest
            // Get the height of the content area as the goal
            targetHeightForFeature = tallestElement.find('.home__feature-content').height();
            finalHeightForFeature = targetHeightForFeature;

            // Work out values for Discover
            // Get the height of the entire feature tile as the goal
            targetHeightForDiscover = tallestHeight;

            // Get the difference between the heights, and add the current thumbnail height
            // Minus the 1px border of the feature tiles
            finalHeightForDiscover = targetHeightForDiscover - discoverTileHeight + discoverThumbnailHeight - 1;

            // Adjust heights of tiles
            features.each(function(key, val){
                if($(val).has('.home__feature-content').length > 0){
                    $(val).find('.home__feature-content').height(finalHeightForFeature);
                } else {
                    $(val).find('.personalise__image').height(finalHeightForDiscover);
                }
            });
        } else {
            // Discover is tallest
            // Work out values for Feature
            targetHeightForFeature = tallestHeight - featureThumbnailHeight;

            // Adjust heights of tiles
            features.each(function(key, val){
                if($(val).has('.home__feature-content').length > 0){
                    // Find the current item
                    // The final height is the target minus the content padding difference
                    var currentItem = $(val).find('.home__feature-content');
                    finalHeightForFeature = targetHeightForFeature - (currentItem.innerHeight() - currentItem.height());
                    currentItem.height(finalHeightForFeature);
                }
            });
        }
    };

    if($('.home__tiles').length > 0 && busq.fn.determineWidth() >= 2){
        busq.fn.homeTilesAdjustHeight();
    }
}(jQuery));
(function($){
    'use strict';


}(jQuery));
(function($){
    'use strict';


}(jQuery));
(function($){
    'use strict';

    /*
        Global
    */

    busq.discover = {
        defaults: {
            'business_industry': 'Z',
            'business_industry_value': 'All Businesses',
            'business_stage': 'all',
            'business_size': 'all',
            'business_location': 'all',
            'business_region': 'All'
        },
        tilesLoaded: 0
    };

    // Add zero to amounts less than two digits for consistency
    busq.fn.padZeros = function(number){
        number = '' + number;
        if(number.length < 2){
            return '0' + number;
        } else {
            return number;
        }
    };


    /*
        Storage Functions
    */

    // Retrieve a specified cookie
    busq.fn.getCookie = function(id){
        var target = id + '=';
        var jar = document.cookie.split(';');

        for(var cookie in jar){
            var current = jar[cookie].trim();
            if(current.indexOf(target) === 0){
                return current.substring(target.length, current.length);
            }
        }
    };

    // Check if local storage is possible
    busq.fn.storageEnabled = function(){
        if(typeof(localStorage) !== 'undefined'){
            return true;
        } else {
            return false;
        }
    };

    // Check if session storage is possible
    busq.fn.sessionStorageEnabled = function(){
        if(typeof(sessionStorage) !== 'undefined'){
            return true;
        } else {
            return false;
        }
    };

    // Check if local storage object exists
    // If it exists, return the object
    // If not, create adhering to special rules
    busq.fn.checkStorageObject = function(key, object){
        if(object === null || typeof(object) === 'undefined'){
            switch(key){
                case 'userinfo':
                    object = busq.fn.setUserDefaults();
                case 'personalise':
                    busq.fn.setStorageObject('personalise', 0);
                    object = 0;
                case 'userpanel':
                    busq.fn.setStorageObject('userpanel', 0);
                    object = 0;
                case 'discovered':
                    busq.fn.setStorageObject('discovered', 0);
                    object = 0;
                default:
                    break;
            }
        }

        return object;
    };

    // Check if session storage object exists
    // If it exists, return the object
    // If not, create adhering to special rules
    busq.fn.checkSessionObject = function(key, object){
        if(object === null || typeof(object) === 'undefined'){
            switch(key){
                case 'content':
                    object = busq.fn.storeDefaultContent();
                default:
                    break;
            }
        }

        return object;
    };

    // Store the data in session storage
    busq.fn.setSessionObject = function(key, value){
        if(busq.fn.sessionStorageEnabled()){
            sessionStorage.setItem('busqld-' + key, JSON.stringify(value));
        }
    };

    // Retrieve data from session storage
    busq.fn.getSessionObject = function(key){
        var object = {};

        if(busq.fn.sessionStorageEnabled()){
            object = JSON.parse(sessionStorage.getItem('busqld-' + key));
            object = busq.fn.checkSessionObject(key, object);
        }

        return object;
    };

    // Remove data from session storage
    busq.fn.removeSessionObject = function(key){
        if(busq.fn.sessionStorageEnabled()){
            sessionStorage.removeItem('busqld-' + key);
        }
    };


    // Store the data in local storage
    busq.fn.setStorageObject = function(key, value){
        if(busq.fn.storageEnabled()){
            localStorage.setItem('busqld-' + key, JSON.stringify(value));
        }
    };

    // Retrieve data from local storage
    busq.fn.getStorageObject = function(key){
        var object = {};

        if(busq.fn.storageEnabled()){
            object = JSON.parse(localStorage.getItem('busqld-' + key));
            object = busq.fn.checkStorageObject(key, object);
        }

        return object;
    };

    // Remove data from local storage
    busq.fn.removeStorageObject = function(key){
        if(busq.fn.storageEnabled()){
            localStorage.removeItem('busqld-' + key);
        }
    };

    // Set the object's timestamp value to the current time
    busq.fn.updateObjectTimestamp = function(object){
        var current = new Date().getTime();

        object.updated = current;

        return object;
    };


    /*
        Browser Capability Functions
    */

    // Private Browsing does not allow browser storage
    busq.fn.canPersonalise = function(){
        
        try {
            localStorage.setItem('store', '1');
            localStorage.removeItem('store');

            sessionStorage.setItem('store', '1');
            sessionStorage.removeItem('store');
            
            return true;
        } catch (error) {
            return false;
        }
    };
    
    
    // Display relevant messages on the page
    // Enable storage-independent functions
    busq.fn.privateBrowsingFallbacks = function(){
        busq.fn.togglePrivateBrowsingNotices();
    };

    // Show whether the personalised view is enabled
    busq.fn.personalisationEnabled = function(){
        return busq.fn.getStorageObject('discovered');
    };

    // Show personalisation status
    busq.fn.isPersonalised = function(){
        return busq.fn.getStorageObject('personalise');
    };

    // Enable personalisation state for the page
    busq.fn.enablePersonalisation = function(){
        // Turn on flag to indicate we're looking at a personalised version
        busq.fn.setStorageObject('discovered', 1);

        busq.fn.addPersonalisation();
    };

    // Disable personalisation state for the page
    busq.fn.disablePersonalisation = function(){
        // Update the Discover feature tile to show personalisation state
        $('.personalise__wrapper').removeClass('personalised');

        busq.fn.removePersonalisation();
    };

    // Add personalisation
    busq.fn.addPersonalisation = function(){
        // Turn on flag to configure the page
        busq.fn.setStorageObject('personalise', 1);

        // Start personalisation functions if it makes sense
        if($('.personalisation-panel').length > 0){
            // Enable the user panel
            busq.fn.displayDataPanel();

            // Update the discover tile to show "off" option
            $('.personalise--toggle').removeClass('personalise--on');
            $('.personalise--toggle').addClass('personalise--off');
            $('.personalise--toggle .personalise--state').text('off');
		        $('.personalise__title').html("<h2><span>We're </span><span>customising </span><span>this </span><span>content</span></h2>");
		        $('.personalise__links--message').html("<strong>Content is currently customised</strong>");
		        $('.personalise__foot--wrapper').addClass("hidden");
		        $('.personalise__options .personalise__links-list-item').removeClass('hidden');

            // Load in dynamic content
            busq.fn.updateContent(1);

            // Load in dynamic events
            busq.fn.loadPersonalisedEvents();
        }

        return false;
    };

    // Remove personalisation
    busq.fn.removePersonalisation = function(){
        // Turn on flag to configure the page
        busq.fn.setStorageObject('personalise', 0);

        // End personalisation functions if it makes sense
        if($('.personalisation-panel').length > 0){
            // Disable the user panel
            busq.fn.hideDataPanel();

            // Update the discover tile to show "on" option
            $('.personalise--toggle').removeClass('personalise--off');
            $('.personalise--toggle').addClass('personalise--on');
            $('.personalise--toggle .personalise--state').text('on');
            $('.personalise__links--message').html("<strong>Content is currently not customised</strong>");

            // Load in default content
            busq.fn.updateContent(0);

            // Load in default events
            busq.fn.loadDefaultEventsContent();
        }

        return false;
    };


    // Initiate functions and binding for personalisation
    busq.fn.startPersonalising = function(){
        var userinfo = busq.fn.getStorageObject('userinfo');

        // Update the Discover feature tile to show personalisation state
        $('.personalise__wrapper').addClass('personalised');

        // Save the default page state
        busq.fn.storeDefaultContent();

        // If we're personalising, fetch new content
        if(busq.fn.isPersonalised()){
            busq.fn.addPersonalisation();
        }

        $('body').on('click', '.personalise--off', busq.fn.removePersonalisation);
        $('body').on('click', '.personalise--on', busq.fn.addPersonalisation);
    };


    /*
        Content Functions
    */

    // Add non-personalised content into storage
    busq.fn.storeDefaultContent = function(){
        var content = {};

        $('.personalised-content').each(function(key, val){
            content[$(val).attr('data-id')] = $(val).html();
        });

        busq.fn.setSessionObject('content', content);

        return content;
    };

    // Load non-personalised content from storage
    busq.fn.loadDefaultContent = function(element){
        var content = busq.fn.getSessionObject('content');
        var index = element.attr('data-id');

        element.css('opacity', '0');

        setTimeout(function(){
            element.html(content[index]);
            element.css('opacity', '1');
        }, 500);
    };

    // Prepare query for content search
    busq.fn.prepareContentQuery = function(element){
        var userinfo = busq.fn.getStorageObject('userinfo');

        // Construct the data query to send to Funnelback
        var searchQuery = {
            'scope': element.attr('data-scope'),
            'numranks': element.attr('data-numranks'),
            'ablisData': userinfo.audience['business_industry'],
            'businessStage': userinfo.audience['business_stage'],
            'businessSize': userinfo.audience['business_size'],
            'businessLocation': userinfo.audience['business_location'],
            'businessRegion': encodeURI(userinfo.audience['business_region'])
        };

        return searchQuery;
    };

    // Create an output of the Funnelback URL for testing purposes
    busq.fn.constructDebugURL = function(searchQuery){
        var debugURL = 'https://deedi2-funnelback01.squiz.net/s/search.json?collection=business-qld-content-library-meta&profile=_default';

        debugURL += '&num_ranks=2&query_orsand=';
        debugURL += 'ablisData:' + searchQuery['ablisData'];
        debugURL += '|businessStage:' + searchQuery['businessStage'];
        debugURL += '|businessSize:' + searchQuery['businessSize'];
        debugURL += '|businessLocation:' + searchQuery['businessLocation'];
        debugURL += '|businessRegion:' + encodeURI(searchQuery['businessRegion']);
        debugURL += '&reslimit=' + searchQuery['numranks'];
        debugURL += '&scope=' + searchQuery['scope'];

        return debugURL;
    };

    // Load content from Funnelback
    busq.fn.loadFromLibrary = function(element){
        var libraryURL = $('.personalisation-panel').attr('data-url');
        var searchQuery = busq.fn.prepareContentQuery(element);
        var debugURL = busq.fn.constructDebugURL(searchQuery);

        //console.log(debugURL);
        //console.log('-------');

        $.ajax({
            type: 'GET',
            url: libraryURL,
            data: searchQuery,
            beforeSend: function(jqXHR, settings) {
                // Hide the default content to indicate a state change
                //console.log('AJAX URL: ' + settings.url);
                element.css('opacity', '0');
            },
            success: function(data){
                // Update the contents of the element with new HTML
                // Restore opacity to show new content
                element.html(data);
                element.css('opacity', '1');

                if(searchQuery['scope'] === 'top-features' && responsive === '3'){
                    busq.fn.homeFeaturesAdjustHeight();
                }

                busq.fn.updatePersonalisedTileHeights(element);
            }
        });
    };

    // Modify the personalised content on the page
    busq.fn.updateContent = function(dynamic){
        $('.personalised-content').each(function(key, val){
            // Load in dynamic content
            // Else load in default content
            if(dynamic){
                busq.fn.loadFromLibrary($(val));
            } else {
                busq.fn.loadDefaultContent($(val));
            }
        });
    };

    // Adjust the home tiles if all content is returned
    busq.fn.updatePersonalisedTileHeights = function(element){
        var tiles = ['content--alerts', 'content--i-want-to', 'content--events'];
        var current = $(element).attr('data-id');

        if(tiles.indexOf(current) !== -1){
            busq.discover.tilesLoaded += 1;
        }

        if(busq.discover.tilesLoaded === tiles.length && responsive === '3'){
            busq.fn.homeTilesAdjustHeight();
            busq.discover.tilesLoaded = 0;
        }
    };


    /*
        Events Content Functions
    */

    // Load events content from Funnelback
    /*busq.fn.loadPersonalisedEvents = function(){
        var events = $('.events-personalised-content');
        var libraryURL = events.attr('data-library-url');
        var numranks = events.attr('data-numranks');
        var userinfo = busq.fn.getStorageObject('userinfo');

        var searchQuery = {
            'numranks': numranks,
            'businessRegion': encodeURI(userinfo.audience['business_region'])
        };

        var ajaxURL = libraryURL + '?num_ranks=' + searchQuery.numranks + '&query_orsand=EventRegion:%22' + searchQuery.businessRegion  + '%22|EventRegion:%22All%22';

        $.ajax({
            type: 'GET',
            url: ajaxURL,
            //data: searchQuery,
            beforeSend: function(jqXHR, settings) {
                // Hide the default content to indicate a state change
                events.css('opacity', '0');
                //console.log('Events AJAX URL:' + ajaxURL);
            },
            success: function(data){
                // Update the contents of the element with new HTML
                // Restore opacity to show new content
                events.html(data);
                events.css('opacity', '1');

                busq.fn.updatePersonalisedTileHeights(events);
            }
        });
    };*/

    // Add non-personalised events content into storage
    busq.fn.storeEventsContent = function(){
        var eventsContent = $('.events-personalised-content').html();

        busq.fn.setSessionObject('eventscontent', eventsContent);

        return eventsContent;
    };

    // Load non-personalised content from storage
    busq.fn.loadDefaultEventsContent = function(){
        var content = busq.fn.getSessionObject('eventscontent');

        $('.events-personalised-content').css('opacity', '0');

        setTimeout(function(){
            $('.events-personalised-content').html(content);
            $('.events-personalised-content').css('opacity', '1');
        }, 500);
    };


    /*
        Data Panel Functions
    */

    // Populate the user data panel with storage information
    busq.fn.constructDataPanel = function(){
        var userinfo = busq.fn.getStorageObject('userinfo');
        var audience = userinfo.audience;
        var timestamp = new Date(userinfo.updated);
        var panel = $('.personalisation-panel');
        var markup;
        var updated;

        // Generate timestamp in a friednly format
        updated = busq.fn.padZeros(timestamp.getDate()) + '/' + busq.fn.padZeros(timestamp.getMonth()+1) + '/' + timestamp.getFullYear() + ' ' + busq.fn.padZeros(timestamp.getHours()) + ':' +busq.fn.padZeros(timestamp.getMinutes()) + ':' +busq.fn.padZeros(timestamp.getSeconds());

        markup = '<ul>';
        for(var item in audience){
            markup += '<li class="personalise__storage-item"><strong>' + item.replace(/_/g, ' ') + '</strong>: ' + audience[item] + '</li>';
        }
        markup += '</ul>';

        panel.find('.content__tile-body').html(markup);
        panel.find('.content__tile-foot').html('<div class="personalise__timestamp"><strong>Updated:</strong> ' + updated + '</div>');
    }

    // Show the user data panel
    busq.fn.displayDataPanel = function(){
        busq.fn.setStorageObject('userpanel', 1);

        if($('.personalisation-panel').length > 0){
            $('.personalisation-panel').css('display', 'block');
        }
    };

    // Hide the user data panel
    busq.fn.hideDataPanel = function(){
        busq.fn.setStorageObject('userpanel', 0);

        if($('.personalisation-panel').length > 0){
            $('.personalisation-panel').css('display', 'none');
        }
    };


    /*
        Private Browsing Functions
    */

    busq.fn.togglePrivateBrowsingNotices = function(){
        // The well on the Discover form
        if($('.well--private-browsing').length > 0){
            $('.well--private-browsing').css('display', 'block');
        }

        // The feature tile on the home page
        if($('.personalise__wrapper').length > 0){
            $('.personalise__warning').css('display', 'block');
            $('.personalise__options').css('display', 'none');
            $('.personalise__persist-options').css('display', 'none');

            $('.personalise__wrapper').addClass('personalised');

            if(responsive === '3'){
                busq.fn.homeFeaturesAdjustHeight();
            }
        }
    };
    
    busq.fn.togglePersistPrivateBrowsingNotices = function(){
        // The well on the Discover form
        if($('.well--private-browsing').length > 0){
            $('.well--persist-browsing').css('display', 'block');
        }

        // The feature tile on the home page
        if($('.personalise__wrapper').length > 0){
            $('.personalise__warning').css('display', 'none');
            $('.personalise__options').css('display', 'none');
            $('.personalise__persist-options').css('display', 'block');

            $('.personalise__wrapper').addClass('personalised');

            if(responsive === '3'){
                busq.fn.homeFeaturesAdjustHeight();
            }
        }
    };


    /*
        Personalisation Functions
    */

    // Apply default values to the user model
    busq.fn.setUserDefaults = function(){
        var object = {};

        object.audience = {
            'business_industry': busq.discover.defaults['business_industry'],
            'business_industry_value': busq.discover.defaults['business_industry_value'],
            'business_stage': busq.discover.defaults['business_stage'],
            'business_size': busq.discover.defaults['business_size'],
            'business_location': busq.discover.defaults['business_location'],
            'business_region': busq.discover.defaults['business_region']
        };

        busq.fn.savePersonalisation(object);

        return object;
    };

    // Update the userdata personalisation object in storage
    busq.fn.savePersonalisation = function(object){
        object = busq.fn.updateObjectTimestamp(object);
        busq.fn.setStorageObject('userinfo', object);
    };

    // Save Discover form information
    busq.fn.saveDiscoverChoices = function(){
        var object = {};
        var business_industry;
        var business_industry_value;
        var business_stage = [];
        var business_size;
        var business_location;
        var business_region;

        object['audience'] = {};

        // Save the industry key from hidden input text field
        business_industry = $('[data-personalise="business_industry"]').find('#q3143_q1');
        object.audience['business_industry'] = business_industry.val();

        if(object.audience['business_industry'] === ''){
            object.audience['business_industry'] = busq.discover.defaults['business_industry'];
        }

        // Save the industry value from hidden input text field
        business_industry_value = $('#ablislabel');
        object.audience['business_industry_value'] = business_industry_value.val();

        if(object.audience['business_industry_value'] === ''){
            object.audience['business_industry_value'] = busq.discover.defaults['business_industry_value'];
        }

        // Save the stage value from all selected checkboxes
        $('[data-personalise="business_stage"] input').each(function(key, val){
            var option;
            if($(val).prop('checked')){
                business_stage.push($(val).attr('data-key'));
            }
        });

        if(business_stage.length > 0){
            object.audience['business_stage'] = business_stage.join(';');
        } else {
            object.audience['business_stage'] = busq.discover.defaults['business_stage'];
        }

        // Save the size value from the selected input radio field
        business_size = $('[data-personalise="business_size"] input:checked');
        if(business_size.length > 0){
            object.audience['business_size'] = business_size.attr('data-key');
        } else {
            object.audience['business_size'] = busq.discover.defaults['business_size'];
        }


        // Save the location value from the selected input radio field
        business_location = $('[data-personalise="business_location"] input:checked');
        if(business_location.length > 0){
            object.audience['business_location'] = business_location.next().text().toLowerCase();
        } else {
            object.audience['business_location'] = busq.discover.defaults['business_location'];
        }


        // Save the region from the selected select field
        business_region = $('[data-personalise="business_region"] select');
        object.audience['business_region'] = business_region.val();

        // Update the user model
        busq.fn.savePersonalisation(object);

        // Set up a personalised state
        busq.fn.enablePersonalisation();
    };


    /*
        Document Ready
    */

    $(document).ready(function(){
        
        // START: Removes any stored personalisation of 'Customise this site'
        busq.fn.removeStorageObject('userinfo');
        busq.fn.removeStorageObject('discovered');
        busq.fn.removeStorageObject('personalise');
        // Note: busq.fn.removeStorageObject('userpanel'); is not called because function "hideDataPanel" will set the 'userpanel' value to '0'.
        busq.fn.hideDataPanel();
        // END
  
  
        
       // Initialise Fancybox
        busq.fn.InitialiseFancybox();

        if(busq.fn.canPersonalise()){
            console.log('can personalise');
            var retry = function(isDone, next) {
                var current_trial = 0, max_retry = 50, interval = 10, is_timeout = false;
                var id = window.setInterval(
                    function() {
                        if (isDone()) {
                            window.clearInterval(id);
                            next(is_timeout);
                        }
                        if (current_trial++ > max_retry) {
                            window.clearInterval(id);
                            is_timeout = true;
                            next(is_timeout);
                        }
                    },
                    10
                );
            }
            
            var isIE10OrLater = function(user_agent) {
                var ua = user_agent.toLowerCase();
                if (ua.indexOf('msie') === 0 && ua.indexOf('trident') === 0) {
                    return false;
                }
                var match = /(?:msie|rv:)\s?([\d\.]+)/.exec(ua);
                if (match && parseInt(match[1], 10) >= 10) {
                    return true;
                }
                return false;
            }
            
            var detectPrivateMode = function(callback) {
                var is_private;
            
                if (window.webkitRequestFileSystem) {
                    window.webkitRequestFileSystem(
                        window.TEMPORARY, 1,
                        function() {
                            is_private = false;
                        },
                        function(e) {
                            console.log(e);
                            is_private = true;
                        }
                    );
                } else if (window.indexedDB && /Firefox/.test(window.navigator.userAgent)) {
                    var db;
                    
                    try {
                        db = window.indexedDB.open('test');
                    } catch(e) {
                        is_private = true;
                    }
                    
            
                    if (typeof is_private === 'undefined') {
                        retry(
                            function isDone() {
                                return db.readyState === 'done' ? true : false;
                            },
                            function next(is_timeout) {
                                if (!is_timeout) {
                                    is_private = db.result ? false : true;
                                }
                            }
                        );
                    }
                } else if (isIE10OrLater(window.navigator.userAgent)) {
                    is_private = false;
                    try {
                        if (!window.indexedDB) {
                            is_private = true;
                        }                 
                    } catch (e) {
                        is_private = true;
                    }
                } 
            
                retry(
                    function isDone() {
                        return typeof is_private !== 'undefined' ? true : false;
                    },
                    function next(is_timeout) {
                        callback(is_private);
                    }
                );
            }
            detectPrivateMode(
                function(is_private) {
                    if(is_private){
                        busq.fn.togglePersistPrivateBrowsingNotices();
                    }
                }
            );
            
            
            // Only available on the home page
            if($('.personalisation-panel').length > 0){
                busq.fn.constructDataPanel();

                // Proceed if personalised state is enabled
                if(busq.fn.personalisationEnabled()){
                    busq.fn.startPersonalising();

                    if($('.events-personalised-content').length > 0) {
                        busq.fn.storeEventsContent();
                    }

                    //busq.fn.loadPersonalisedEvents();

                    if(responsive === '3'){
                        busq.fn.homeFeaturesAdjustHeight();
                    }
                }
        	}
        } else {
            console.log('cannot personalise');
            busq.fn.privateBrowsingFallbacks();
        }
        
    });

}(jQuery));


/*----------------------------END: Customise the site script ------------------------------------------------*/


(function($){
    'use strict';
    
    // Initialise FancyBox 3.0     
    busq.fn.InitialiseFancybox = function(){
        $("[data-fancybox]").fancybox({
    		buttons : ['close'],
    		loop : true,
    		animationEffect : "zoom"
        });
    }
}(jQuery));
(function($){
    'use strict';

    // Display contextual social media accounts
    busq.fn.socialRelatedLinks = function() {

        /** Metadata Cleaner **/
        function cleanMetadata(dirtyString) {
            var allTerms = dirtyString.split(';');
            var classList = '';
            for (var i = 0; i < allTerms.length; i++) {
                var dirtyTerm = $.trim(allTerms[i]).replace(/%20/g, '-').replace('(', '').replace(')', '').replace(',', '');
                var finalTerm = dirtyTerm.toLowerCase().replace(/\s+/g, '-'); //make lower case and replace spaces with '-'
                classList += finalTerm + ' ';
            }
            return $.trim(classList);
        }

        /** Convert metadata output into classes **/
        $('.audience').each(function() {
            if ($(this).text().length > 0) {
                var categoryItems = cleanMetadata($(this).text());
                $(this).closest('.social-context-wrapper').addClass(categoryItems);
            }
        });

        // Change the order of the links if an Audience terms has been passed.
        var passedVar = location.href.split('?');
        if (passedVar.length > 1) {
            var usedVar = passedVar[1].split('=');
            var aTwitterAccount = [];
            if (usedVar[0] == 'audienceFilter') {
                var varString = decodeURIComponent(usedVar[1]).split(';');
                //move all divs that have this class into the context div
                $('.social-context-wrapper').each(function() {
                    for (var i = 0, lenI = varString.length; i < lenI; i++) {
                        if ($(this).hasClass(cleanMetadata(varString[i])) === true) {
                            if ($(aTwitterAccount).find($(this))) {
                                aTwitterAccount.push($(this));
                            } else {
                                //can sort to top here if needs be
                            }
                        }
                    }
                    
                    
                });
                
                    
                for (var j = 0, lenJ = aTwitterAccount.length; j < lenJ; j++) {
                    $('#contextual-links').append(aTwitterAccount[j]);
                    
                }
                
                
                if($(".social_related_accounts .social-context-wrapper").length === 0){
                    $(".social_related_accounts").hide();
                    $("h2.hide-if-empty").hide();
                }else{
                    $(".social_related_accounts").show();
                }
            }
        }else{
            
        }
    };

    if ($('#contextual-links').length > 0) {
        busq.fn.socialRelatedLinks();
    }

}(jQuery));
(function($){
    'use strict';

    // Viewport cleanup for the main navigation
    busq.fn.viewportCleanupHeader = debounce(function(){
        responsive = $('#responsive').css('z-index');

        // If on desktop
        if(responsive === '3'){
            $('.header__navigation--list').attr('style', '');
        }
    }, 250);

    // Viewport restructure for feature tiles
    busq.fn.viewportCleanupFeatureTiles = debounce(function(){
        responsive = $('#responsive').css('z-index');

        // If on desktop
        if(responsive === '3' && $('.home__feature').length > 0){
            busq.fn.homeFeaturesAdjustHeight();
        } else {
            $('.home__feature-content').css('height', '');
            $('.personalise__image').css('height', '');
        }
    }, 250);

    // Viewport cleanup for the left navigation
    busq.fn.viewportCleanupLeftnav = debounce(function(){
        if($('.content__navigation').length > 0){
            busq.fn.arrangeSideNavigation();
        }
    }, 250);

    // Viewport cleanup for the footer
    busq.fn.viewportCleanupFooter = debounce(function(){
        responsive = $('#responsive').css('z-index');

        // If on desktop
        if(responsive === '3'){
            $('.footer__navigation-sublist').attr('style', '');
        }
    }, 250);

    $(window).on('load resize', busq.fn.viewportCleanupHeader);
    $(window).on('load resize', busq.fn.viewportCleanupFeatureTiles);
    $(window).on('load resize', busq.fn.viewportCleanupFooter);
    $(window).on('load resize', busq.fn.viewportCleanupLeftnav);
}(jQuery));
//# sourceMappingURL=global.js.map



$(document).ready(function (){
    
    // Script to wrap lightbox images ('content-image') in a div class named 'gallery-images'
    //commented out for now because it plays havok with the lightbox CT's positioning options
    //$('.content-image').wrapAll("<div class='gallery-images' />");
       
       
    //For pages with podcasts embeded - Get the page title and add google analytics tracking code using the title of the page
    var pageTitle =  document.querySelector("meta[name='DCTERMS.title']").content;
    //console.log(pageTitle);
       
    $("audio").bind("play", function(){
        console.log("Audio played");
        ga ('send', 'event', 'Podcasts', 'play', pageTitle);
    });

    
});

// Funnelback auto-completion jQuery plugin
// Author: Nicolas Guillaumin, Matt Sheppard
// Copyright Funnelback, 2012
// $Id: jquery.funnelback-completion.js 41163 2014-11-28 06:00:43Z msheppard $

(function($) {
 
        
    $.fn.fbcompletion = function(settings) {
        
        var facetBasedCompletionSuccess = function(config, request, data) {
            var responses = new Array();
            var partial_query_parts = request.term.split(" ");
            var last_partial_term = partial_query_parts[partial_query_parts.length -1];
            var partial_complete_query = request.term.substring(0, 
                                          request.term.length - last_partial_term.length);
            if(last_partial_term.substring(0,1) == '|') {
              last_partial_term = last_partial_term.substring(last_partial_term.indexOf(':') + 1, last_partial_term.length);
            }
            var lower_last_partial_term = last_partial_term.toLowerCase();
            
            
            
            var facets = data.response.facets;
            var rank = 1;
            for (var i=0; i<facets.length; i++) {
                var facet = facets[i];
                var category = facet.name;
                if(typeof (facet.categories) != "undefined") {
                    var acceptTermBasedOnFacetName = 
                        facet.name.substring(0, last_partial_term.length).toLowerCase()
                          == lower_last_partial_term;
                    for(var j=0; j<facet.categories[0].values.length; j++){
                        var value = facet.categories[0].values[j];
                        
                        var facetQueryTerm = '|' + value.constraint + ':' + value.label;
                        
                        if((value.label.substring(0, last_partial_term.length) 
                            == last_partial_term || acceptTermBasedOnFacetName)
                            && request.term.indexOf(facetQueryTerm) == -1
                          ) {
                              var extra = {
                                    action_t: 'E',
                                    //action: "/s/search.html?" + config.query + '&' + value.queryStringParam,
                                    action: partial_complete_query + facetQueryTerm + ' ',
                                    value: partial_complete_query + value.label,
                                    category: category,
                                    rank: rank,
                                    matchOn: request.term,
                                    disp_t:'H',
                                    disp: value.label,
                                    wt: 500,
                                    
                                  };
                              //console.log("action" + extra.action);
                              responses.push({
                                  label: extra.disp,
                                  value: extra.value,
                                  extra: extra,
                                  matchOn: extra.matchOn,
                                  category: extra.category,
                                  rank: extra.rank,
                              });
                              rank++;
                        }
                    }
                }
            }
            return responses;
        }
        
        var config = {
            'collection'                   : 'funnelback_documentation',
            'show'                         : 10,
            'sort'                         : 0,
            'delay'                        : 0,
            'length'                       : 3,
            'alpha'                        : 0.5,
            'program'                      : '/s/redirect',
            'interactionLog'               : '/s/log',
            'format'                       : 'extended',
            'enabled'                      : 'disabled',
            'standardCompletionEnabled'    : true, 
            'logging'                      : 'enabled',
            'dwellLogging'                 : 'enabled',
            'dwellLoggingTimeout'          : 3000,
            'selectLogging'                : 'enabled',
            'tmplId'                       : 'fb-completion-tmpl',
            'profile'                      : '_default',
            //search based completion
            'searchBasedCompletionEnabled' : false,
            'searchBasedCompletionProgram' : '/s/redirect',
            'searchBasedCompletionProfile' : null,
            'searchBasedCompletionFunction': facetBasedCompletionSuccess, 
            'zindex'              : 1000
        };
        
        

        /*
        * This function logs events to the interaction log, and once the logging 
        * has been completed, executes the given action callback.
        *
        * loggingEnabled - Whether logging should be performed (action will be called
        *    regardless of whether logging is enabled)
        * mayBeAsync - Can the logging be done asyncronously?
        *    Must be false if executing action will load a new page (unloading the current one)
        * type - The type of event to log
        * paramters - Properties to log with the event
        * action - Callback to be executed after logging
        */
        var logger = function(loggingEnabled, mayBeAsync, type, parameters, action) {
            if(loggingEnabled && config.logging === 'enabled'){
                var log_url = config.interactionLog
                                + '?collection=' + config.collection
                                + '&type=' + encodeURIComponent(type)
                                // Send the local time as Ajax requests might arrive out of order
                                // on the server side
                                + '&client_time=' + (new Date()).getTime()
                                + ((config.profile !== '') ? '&profile=' + config.profile : '' );
                // Fill in the specific logging parameters
                for (var key in parameters) {
                    log_url += "&" + encodeURIComponent(key) + "=" + encodeURIComponent(parameters[key]);
                }

                if (mayBeAsync) {
                    action();
                    jQuery.ajax({
                        type: 'GET',
                        dataType: 'jsonp',
                        url:  log_url,
                        error: function(xhr, textStatus, errorThrown) {
                            if (window.console) {
                                console.log('Interaction log error: ' + textStatus + ', ' + errorThrown);
                            }
                        }
                    });
                } else {
                    jQuery.ajax({
                        type: 'GET',
                        url:  log_url,
                        error: function(xhr, textStatus, errorThrown) {
                            if (window.console) {
                                console.log('Interaction log error: ' + textStatus + ', ' + errorThrown);
                            }
                            action();
                        },
                        success:  function(data) {
                            action();
                        }
                    });
                }
            } else {
                action();
            }
        };
   
        if (settings) $.extend(config, settings);
    
        if (config.enabled != 'enabled' ) {
            return;
        }
    
        this.each(function() {
            var targetElement = this;

            var dwellTimeoutCallback;

            // Compile jQuery template
            var compiledTmpl;
            if (jQuery().template) {
                if (jQuery('#'+config.tmplId).length > 0) {
                    compiledTmpl = jQuery('#'+config.tmplId).template();
                } else {
                    compiledTmpl = jQuery('<script>[Error: Template <tt>'+config.tmplId+'</tt> not found]</script>').template();
                }
            }
  
            $(targetElement).autocomplete( {
                appendTo: ($("#fb-queryform").length > 0) ? "#fb-queryform" : "body",
                source: function (request, response) {
                    var finished = [!config.searchBasedCompletionEnabled, !config.standardCompletionEnabled];
                    var allResponses = [new Array(), new Array()];
                    
                    if(config.searchBasedCompletionEnabled) {
                      jQuery.ajax({
                          type: 'GET',
                          url: config.searchBasedCompletionProgram
                              + '?'
                              + replaceQueryInQuestionWithPartialQuery(config.query, request.term,
                                                         config.searchBasedCompletionProfile),
                          dataType: 'jsonp',
                          error: function(xhr, textStatus, errorThrown) {
                            if (window.console) { 
                                  console.log('Autocomplete error: ' + textStatus + ', ' + errorThrown);
                              }
                          },
                          success:  function(data) {
                              //Call the function that will process the json.
                              allResponses[0] = config.searchBasedCompletionFunction(config, request, data);
                              finished[0] = true;
                              if(finished[1]) {
                                response (allResponses[1].concat(allResponses[0]));
                              }
                              
                          }
                      });
                    }
                    if(config.standardCompletionEnabled) {
                      jQuery.ajax({
                          type: 'GET',
                          url: config.program
                              + '?collection=' + config.collection
                              + '&partial_query=' + request.term.replace(/ /g, '+')
                              + '&show=' + config.show
                              + '&sort=' + config.sort
                              + '&alpha=' + config.alpha
                              + '&fmt=' + ((config.format == 'simple') ? 'json' : 'json++') 
                              + ((config.profile !== '') ? '&profile=' + config.profile : '' )
                          ,
                          dataType: 'jsonp',
                          error: function(xhr, textStatus, errorThrown) {
                            if (window.console) { 
                                  console.log('Autocomplete error: ' + textStatus + ', ' + errorThrown);
                              }
                          },
                          success:  function(data) {
                              var responses = allResponses[1];
      
                              for (var i=0; i<data.length; i++) {
                                  var suggestion = data[i];
      
                                  if (suggestion == null) {
                                      continue;
                                  }

                                  if (typeof(suggestion) == 'string') {
                                      // Single string suggestion
                                      responses.push({
                                          label: suggestion,
                                          matchOn: request.term,
                                          rank: i + 1
                                      });
                                  } else if (typeof(suggestion) == 'object') {
                                      var myValue = suggestion.key;
                                      if(suggestion.action_t == 'Q'){
                                          myValue = suggestion.action;
                                      }
                                      if(suggestion.action_t == 'S'){
                                          myValue = suggestion.disp;
                                      }
                                      responses.push({
                                          label: (suggestion.disp) ? suggestion.disp : suggestion.key,
                                          value: myValue,
                                          extra: suggestion,
                                          matchOn: request.term,
                                          category: suggestion.cat,
                                          rank: i + 1
                                      });
                                  }
                              }
                              
                              finished[1] = true;
                              if(finished[0]) {
                                response (allResponses[1].concat(allResponses[0]));
                              }
                          }
                      });
                    }
                },

                open: function() {
                    jQuery(this).autocomplete('widget').css('z-index', config.zindex);

                    /* 
                    * Clear any existing dwell logging timeout before we (potentially) set
                    * a new one to reflect the changed menu.
                    */
                    if (typeof dwellTimeoutCallback !== 'undefined') {
                        clearTimeout(dwellTimeoutCallback);
                    }

                    // Set a new dwell logging timeout if this logging is active
                    if(config.dwellLogging === 'enabled'){
                        dwellTimeoutCallback = setTimeout(
                            function(event) {
                                var partialQuery = $(targetElement).val();
                                logger(
                                    config.dwellLogging === 'enabled',
                                    true,
                                    "dwell",
                                    {partial_query: partialQuery},
                                    function(){
                                        /* Do nothing, we're just logging the fact */
                                    }
                                )
                            },
                            config.dwellLoggingTimeout
                        );
                    }

                    return false;
                },

                close: function() {
                    // Clear any dwell timeout callback when the menu gets closed
                    if (typeof dwellTimeoutCallback !== 'undefined') {
                        clearTimeout(dwellTimeoutCallback);
                    }
                },

                delay: config.delay,

                minLength: config.length,
                select: function(evt, ui) {
                    // Log select events before perfoming the associated action
                    
                    var logMayBeAsync = false;
                    // Logging can only be async if the page won't change
                    // We assume any javascript callback you're using won't change the page
                    if (ui.item.extra) {
                        if (ui.item.extra.action_t == 'C' ||
                            ui.item.extra.action_t == 'E') {
                            logMayBeAsync = true;
                        }
                    }
                    logger(
                        config.selectLogging === 'enabled',
                        logMayBeAsync,
                        "select",
                        {
                            action_type: ui.item.extra.action_t,
                            action: ui.item.extra.action,
                            value: ui.item.value,
                            category: ui.item.category,
                            rank: ui.item.rank,
                            partial_query: ui.item.matchOn
                        },
                        function() {
                            if (ui.item.extra) {
                                switch(ui.item.extra.action_t) {
                                     case 'C':                                                                 
                                        eval(ui.item.extra.action);
                                        break;
                                    case 'U':
                                        document.location = ui.item.extra.action;
                                        break;
                                    case undefined:
                                    case '':
                                    case 'S':
                                        $(targetElement).val(ui.item.value);
                                        var $form = $(targetElement).parents('form'); 
                                        $form.find('button[type="submit"]').trigger('click');
                                        break;
                                    case 'E':
                                        $(targetElement).val(ui.item.extra.action);
                                        var that = $(targetElement);
                                        // Ensure menu is opening again (http://bugs.jqueryui.com/ticket/8784)
                                        setTimeout( function() { that.autocomplete('search'); }, 1);
                                        break;
                                    case 'Q':
                                    default:
                                        $(targetElement).val(ui.item.extra.action);
                                        var $form = $(targetElement).parents('form'); 
                                        $form.find('button[type="submit"]').trigger('click');
                                }
                            } else {
                                // Submit the form on select
                                $(targetElement).val(ui.item.value);
                                var $form = $(targetElement).parents('form'); 
                                $form.find('button[type="submit"]').trigger('click');
                            }
                        }
                    );
                    return false;
                }
            }).data( "ui-autocomplete" )._renderItem = function( ul, item ) {
                var label;

                if ( item.extra ) { // Complex suggestion
                    switch (item.extra.disp_t) {
                        case 'J':   // Json data
                            if (compiledTmpl) {
                                label = jQuery.tmpl(compiledTmpl, item.extra.disp).appendTo('<p></p>').parent().html();
                            } else {
                                label = '[Error: jQuery template plugin is unavailable]';
                            }
                            break;
                        case 'C':   // JS callback
                            label = eval(item.extra.disp);
                            break;
                        case 'T':   // Plain text
                            label = item.label.replace(new RegExp('('+item.matchOn+')', 'i'), '<strong>$1</strong>');
                            break;
                        case 'H':   // HTML
                                    // Label cannot be highlighted as there's no way
                                    // to skip HTML tags when running the regexp, possibly
                                    // corrupting them (ex: <img src="h<strong>t</strong>tp://...)
                        default:
                            label = item.label;
                    }
                } else {
                    // Single string suggestion
                    label = item.label.replace(new RegExp('('+item.matchOn+')', 'i'), '<strong>$1</strong>');
                }
                return jQuery('<li></li>')
                    .data( 'item.autocomplete', item)
                    .append( '<a>' + label + '</a>' )
                    .appendTo(ul);
            };

            $(targetElement).data("ui-autocomplete")._renderMenu = function(ul, items) {
                var that = this;
                var currentCategory = '';
                jQuery.each(items, function(index, item) {
                    if (item.category && item.category != currentCategory) {
                        ul.append('<li class="ui-autocomplete-category">'+item.category+"</li>");
                        currentCategory = item.category;
                    }
                    that._renderItemData(ul, item);
                });
            }

        });
        return this;
    };
 
    /**
     * Replaces the query= value with the completed part of the partial query
     * 
     *<p>e.g. if question is query=old&bar=foo and partialQuery is 'hello moth'
     *it will return query=hello&bar=foo</p>
     * 
     * */
    function replaceQueryInQuestionWithPartialQuery(encodedQuestion, partialQuery, profile) {
        var question = htmlDecode(encodedQuestion);
        var partial_query_parts = partialQuery.split(" ");
        var last_partial_term = partial_query_parts[partial_query_parts.length -1];
        var partial_complete_query = partialQuery.substring(0, partialQuery.length - last_partial_term.length);
        if(partial_complete_query.length == 0) {
           partial_complete_query = '!padrenull'; 
        }
        var questionsParts = question.split('&');
        var newQuestion = '';
        var changedQuery = false;
        var changedProfile = false;
        for(var i = 0; i < questionsParts.length; i++) {
          if(questionsParts[i].substring(0, 6) == 'query=') {
              newQuestion += 'query=' + partial_complete_query;
              changedQuery = true;
          }  else if(profile != null && questionsParts[i].substring(0, 8) == 'profile=') {
              newQuestion += 'profile=' + profile;
              changedProfile = true;
          } else {
              newQuestion += questionsParts[i];
          }
          newQuestion += '&';
        }
        
        if(!changedQuery) {
            newQuestion += 'query=' + partial_complete_query;
            newQuestion += '&';
        }
        if(!changedProfile && profile != null) {
            newQuestion += 'profile=' + profile;
            newQuestion += '&';
        }
        return newQuestion.substring(0, newQuestion.length -1);
    }
    
    function htmlDecode(value){
      return $('<div/>').html(value).text();
    }
 })(jQuery);

(function($){
    'use strict';
    
    function getPathFromUrl(url) {
        return url.split("?")[0];
    }
    
    
                          
    busq.fn.searchAutocomplete = function(){
    //Debounce function so we can slow down the autocomplete              
    function debounce(func, wait, immediate) {
    	var timeout;
    	return function() {
    		var context = this, args = arguments;
    		var later = function() {
    			timeout = null;
    			if (!immediate) func.apply(context, args);
    		};
    		var callNow = immediate && !timeout;
    		clearTimeout(timeout);
    		timeout = setTimeout(later, wait);
    		if (callNow) func.apply(context, args);
    	};
    };
    
    
    
    jQuery('[data-toggle=tooltip]').tooltip({'html': true});
    
    var busqfb = [];
    busqfb.search = {};
    busqfb.collection = $('.header__search-form input[name="collection"]').attr('value');
    busqfb.searchURL = $('.header__search-form').attr('action');
    busqfb.autocompleteURL = $('.header__search-form').attr('data-autocompleteurl') + '?fmt=json++';
    busqfb.logUrl = 'https://deedi-search.clients.squiz.net/s/log';
    
    var fb_completion = {
        'enabled'    : 'true',
        'collection' : busqfb.collection,
        'program'    : busqfb.autocompleteURL,
        'interactionLog' : busqfb.logUrl,
        'standardCompletionEnabled': true,
        'format'    : 'extended',
        'alpha'      : '.5',
        'show'       : '10',
        'sort'       : '0',
        'length'     : '3',
        'delay'      : '150',
        'parentSelector' : 'form',
        'searchSelector'    : 'query', /* The selector for the search input field */
        'suggestionSelector': '.autocomplete' /* The selector for the suggestion box. Expects an ID or class name */
    }
    
    $(document).ready(function(){
        // initialise auto suggestion
        $('.header__search .form__autocomplete input[name="' + fb_completion.searchSelector + '"]').each(function(key, value){
            var $this = $(this);
            // make sure auto suggestion is enabled
            if(fb_completion.enabled === 'true'){
              // store the selector specified for the suggestion box
              // removing the first . or # character
              // insert the suggestion box to the end of the parent container
              var parentItem = $this.parents(fb_completion.parentSelector);
              $('<div class="content__tile autocomplete hide"><ul class="content__tile-body"></ul></div>').appendTo(parentItem);
            }
        });
        
        // initialise auto suggestion
        $('.home__search .form__autocomplete input[name="' + fb_completion.searchSelector + '"]').each(function(key, value){
            var $this = $(this);
            // make sure auto suggestion is enabled
            if(fb_completion.enabled === 'true'){
              // store the selector specified for the suggestion box
              // removing the first . or # character
              // insert the suggestion box to the end of the parent container
              var parentItem = $this.parents(fb_completion.parentSelector);
              var categoriesHTML = '';
              $('<div class="content__tile autocomplete hide"><ul class="content__tile-body">' + categoriesHTML + '</ul></div>').appendTo(parentItem);
            }
        });
        
         // initialise auto suggestion
        $('body.search #busqSiteSearch.form__autocomplete input[name="' + fb_completion.searchSelector + '"]').each(function(key, value){
            var $this = $(this);
            // make sure auto suggestion is enabled
            if(fb_completion.enabled === 'true'){
              // store the selector specified for the suggestion box
              // removing the first . or # character
              // insert the suggestion box to the end of the parent container
              var parentItem = $this.parents(fb_completion.parentSelector);
              var categoriesHTML = '';
              $('<div class="content__tile autocomplete hide"><ul class="content__tile-body">' + categoriesHTML + '</ul></div>').appendTo(parentItem);
            }
        });
               
        //Define a debounce function to slow this down
        var debouncedAutocomplete = debounce(function(event){
        	 busqfb.search.loadSuggestions(event);
        }, fb_completion.delay);
        
                      
        //
        // init various event functions
        //
        // on key up or focus - run some checks before querying search
        $('input[name="' + fb_completion.searchSelector + '"]').on('keyup focus', debouncedAutocomplete);
        // user has clicked on a text only suggestion
        $(fb_completion.suggestionSelector).on('click','.fb-text', busqfb.search.suggestionTextClick);
        // close suggestion box if user clicks elsewhere
        $('html').bind("click touchstart", function(ele){
          if($(ele.target).parents(fb_completion.parentSelector).length > 0){
          //  ele.stopPropagation();
          } else {
            busqfb.search.closeSuggestions();
          }
        });
      });
      
      // this function does a quick check over how may characters are present
      // in the search query.
      busqfb.search.loadSuggestions = function(event){
        
        var searchVal = event.currentTarget.value.toLowerCase();
        
        // if the search query is greater than x characters, start the search
        if(searchVal.length >= fb_completion.length){
          busqfb.search.searchSuggestions(searchVal, event.currentTarget);
        } else { // if it's less than x then close the suggestion box
          busqfb.search.closeSuggestions();
        }
        
      }
      
    // the main function to load the search results
    // this function is expecting the search field text value to be passed
    busqfb.search.searchSuggestions = function(searchVal,element){
        // store the search term
        var theRequest = searchVal;
        var $this = $(element);
        // combine the URL params to a variable
        var theURL = fb_completion.program;/* + theRequest.replace(/ /g, '+');*/
        var formData = $this.parents('form').serialize();
        formData = formData.replace('query', 'partial_query');
        formData = formData.replace('num_ranks=10', 'num_ranks=20');
        formData = formData.replace('business-qld-meta', 'business-qld');
        
        var xhr = $.ajax({
            type: 'GET',
            url: theURL + '&' + formData,
            success: function(data) {
                
                //console.log(theURL + '&' + formData);
                //console.log(data);
                //var $data = JSON.parse(data);
                var $results = data;
                var $uniqueResults = [];
                
                // clear out duplicates
                $.each($results, function(i, el){
                    if($.inArray(el, $uniqueResults) === -1) $uniqueResults.push(el);
                });
                //console.log($uniqueResults.length);
                //
                if($uniqueResults.length > 0){
                    //Split results into categories
                    var categories = [];
                    $uniqueResults.forEach(function(key, value){
                      categories.push(key.cat);
                    });
                    
                    var $uniqueCat=categories.filter(function(itm,i,a){
                        return i==categories.indexOf(itm);
                    });
                    
                    var $wrapper = $this.parents('form').find($(fb_completion.suggestionSelector));
                    var $suggestionslist = $wrapper.children('ul');
                    $suggestionslist.find('.section ul').html('');
                    $('.autocomplete ul.content__tile-body').html('');
                    
                    var footer = '<div class="content__tile-foot"><a href="' + busqfb.searchURL + '?query=' + theRequest + '&collection=' + busqfb.collection + '">View all search results for <strong>' + theRequest + '</strong></a></div>';
                    
                    $uniqueCat.forEach(function(key,value){
                      var catID = key.replace(/ /g, '').replace(/&amp;/g, '');
                      
                      if (catID.length === 0){
                        catID = 'Suggestions';
                        key = 'Suggestions'
                      };
                      
                      var autocompleteUL = '#'+catID;
                      if ($wrapper.find(autocompleteUL)[0]){
                              //do nothing
                      }else{
                        var catContainer = '<li class="section content__tile-head show ' + catID + '"><h3>' + key + '</h3>' + '<ul class="list__square" id="' + catID + '"></ul></li>';
                      }
                
                      $suggestionslist.append(catContainer);
                      var appendTo = $wrapper.find('.autocomplete ul.content__tile-body');
                      $wrapper.find('ul.content__tile-body').find('li.section.Suggestions').appendTo(appendTo);
                    });
                    
                    $wrapper.find('.content__tile-foot').remove();
                    
                    $(footer).insertAfter($suggestionslist);
                    
                    for(var i = 0; i < $uniqueResults.length; i++){
                        if(i < fb_completion.show){
                          
                          //Resets
                          var destination= '';
                         
                          //Find category
                          var catID = $uniqueResults[i].cat.replace(/ /g, '').replace(/&amp;/g, '');
                          
                          //Find title
                          var title = $uniqueResults[i].disp;
                          console.log(title);
                          
                          //Find search term
                          var term = theRequest;
                          
                          //Boldersize search term
                          if (title.toLowerCase().indexOf(term) >= 0){
                            var regEx = new RegExp(term, "ig");
                            var replacement = '<strong>$&</strong>';
                            var title = title.replace(regEx, replacement);
                          }
                          
                          //Replace blank category with 'Suggestions'
                          if (catID.length === 0){
                            catID = 'Suggestions';
                          };
                          
                          //Find destination
                          
                          if ($uniqueResults[i].action.length > 0) {
                              destination = $uniqueResults[i].action;
                          } else {
                              destination = busqfb.searchURL + '?query=' + $uniqueResults[i].key + '&collection=' + busqfb.collection;
                          }
                       
                          
                          if (catID === 'Suggestions'){
                              var item = '<li><a href="' + destination + '">' + title +'</a></li>';
                          }else{
                              if($uniqueResults[i].action.indexOf('business.qld') > -1 || $uniqueResults[i].action.indexOf('clients.squiz.net') > -1){
                                  var item = '<li><a href="' + getPathFromUrl(destination) + '">' + title +'</a></li>';
                              }else{
                                  var item = '<li><a target="_blank" href="' + getPathFromUrl(destination) + '">' + title +' <i class="fa fa-external-link-square" aria-hidden="true"></i></a></li>';
                              }
                          }
                          var parentWrapper = $wrapper.find('#' + catID);
                          $(item).appendTo(parentWrapper);
                        }
                    }
                    
                    //Jam Content to the bottom
                    var $contentsection = $wrapper.find('.section.Content');
                    var $suggestionssection = $wrapper.find('.section.Suggestions');
                    var $sectionParent = $contentsection.parent();
                    $contentsection.appendTo($sectionParent);
                    $suggestionssection.appendTo($sectionParent);
                    
                    
                  // now add the compiled suggestions into the page and show if hidden
                  if ($suggestionslist.length > 0){
                      var $suggestionsections = $suggestionslist.parents('form').find('.section ul');
                      
                      // Any category that does have suggestions, unhide
                      $suggestionsections.has('li').parents('.section.hidden').addClass('show').removeClass('hidden');
                      // Any category that does not have suggestions, hide
                      $suggestionsections.not(':has(li)').parents('.section').removeClass('show').addClass('hidden');
                      
                      // Unhide the whole list
                      $suggestionslist.parents('form').find('.autocomplete').removeClass('hide');
                  }
                } else {
                  $this.parents('form').find($(fb_completion.suggestionSelector)).addClass('hide');
                }
                
              }
        });
      } // end searchSuggestions() function
      // when a user clicks on a text suggestion
      busqfb.search.suggestionTextClick = function (){
        // replace the search field value with the clicked text
        $(this).parents('form').find('input[name="' + fb_completion.searchSelector + '"]').val($.trim($(this).text()));
        $(this).parents('form').find('input[name="' + fb_completion.searchSelector + '"]').focus();
        // now hide the suggestion box
        busqfb.search.closeSuggestions();
        /*return false;*/
      }
      // function to close the suggestion box
      busqfb.search.closeSuggestions = function(){
        // hide only if visible and clear the html
        $(fb_completion.suggestionSelector).filter(':visible').addClass('hide').find('.section ul').html('');
      }

    }
    
    busq.fn.searchAutocomplete();

}(jQuery));
//safedit
(function($){
    'use strict';
    
    busq.fn.loadPersonalisedEvents = function(){
        
        //console.log("coming at you LIVE from dev.js, you're in the PERSONAL EVENTS LOADER");
        
        var events = $('.events-personalised-content');
        var libraryURL = events.attr('data-library-url');
        var numranks = events.attr('data-numranks');
        var userinfo = busq.fn.getStorageObject('userinfo');
    
        var searchQuery = { 
            'numranks': numranks,  
            'businessRegion': encodeURI(userinfo.audience['business_region'])
        };

        var ajaxURL = libraryURL + '?num_ranks=2&query_orsand=EventRegion:%22' + searchQuery.businessRegion  + '%22|EventRegion:%22Central Queensland; Central West Queensland; Darling Downs; Far North Queensland; North Queensland; North West Queensland; South East Queensland; South West Queensland; Wide Bay-Burnett; All%22';    
        
        //var ajaxURL = libraryURL + '?num_ranks=' + searchQuery.numranks + '&query_orsand=EventRegion:%22' + searchQuery.businessRegion  + '%22|EventRegion:%22All%22';        
    
        $.ajax({
            type: 'GET',
            url: ajaxURL,
            //data: searchQuery,
            beforeSend: function(jqXHR, settings) {
                // Hide the default content to indicate a state change
                events.css('opacity', '0');
            },
            success: function(data){
                // Update the contents of the element with new HTML
                // Restore opacity to show new content
                events.html(data);
                events.css('opacity', '1');

                busq.fn.updatePersonalisedTileHeights(events);
            }
        });
    };
}(jQuery));

(function($){
    'use strict';

    if($('.content__tile-form-datepicker').length > 0){
        $('.content__tile-form-datepicker').datepicker();
        
        $('.content__tile-form-datepicker').datepicker("option", "dateFormat", "dd/mm/yy" );
    }
}(jQuery));

(function() {
    "use strict";
    
    busq.fn.tabbedContent = function(){
            
        $(".arrow-tabs li").first().addClass("selected");
        $(".arrow-tabs li").first().find("a").addClass("first");
        $(".arrow-tabs li").last().find("a").addClass("last");
        $(".tab-container .tab-content").hide();
        $(".tab-container .tab-content").first().show();
        
        function checkSelectedState() {
            $(".nav-buttons a").removeClass("disabled");
            if($(".arrow-tabs .selected a").hasClass("first")) {
                $(".nav-buttons a.previous").addClass("disabled");
            }
            if($(".arrow-tabs .selected a").hasClass("last")) {
                $(".nav-buttons a.next").addClass("disabled");
            }
            return false;
        }
        
        checkSelectedState();
        
        $(".arrow-tabs a").click(function(){
            $(".arrow-tabs li").removeClass("selected");
            $(this).parent().addClass("selected");
        
            checkSelectedState();
            
            var activeTabContent = $(this).attr("href");
            $(".tab-content").hide();
            $(activeTabContent).fadeIn(350);                
            var offset = document.getElementById("tutorial_tabs").offsetTop + 200;
            $("html, body").animate({ scrollTop: offset }, 500);
            return false;
        });
        
        $(".nav-buttons a").click(function(){
            var activeTab = $(".arrow-tabs .selected");
            var activeTabLink = $(".arrow-tabs .selected a");
            var nextContent = activeTab.next().find("a").attr("href");
            var prevContent = activeTab.prev().find("a").attr("href");
            
            if ($(this).hasClass("previous")) {
                if($(activeTabLink).hasClass("first")) {                        
                    // Do nothing
                } else {
                    activeTab.removeClass("selected");
                    activeTab.prev().addClass("selected");
                    $(".tab-content").hide();
                    $(prevContent).fadeIn(350);
                }
            }
            if ($(this).hasClass("next")) {
                if($(activeTabLink).hasClass("last")) {
                    // Do nothing
                } else {
                    activeTab.removeClass("selected");
                    activeTab.next().addClass("selected");  
                    $(".tab-content").hide();
                    $(nextContent).fadeIn(350);
                }
            }
            checkSelectedState();
            var offset = document.getElementById("tutorial_tabs").offsetTop;
            $("html, body").animate({ scrollTop: offset }, 500); 
            return false;
        });
    }
    
    if($('#tutorial_content').length > 0 || $('ul.arrow-tabs').length > 0 || $('#tutorial_tab_content').length > 0){
        busq.fn.tabbedContent();
    }
    
    
    busq.fn.eventsEmpty = function(){
        //Check if Events is empty
        if($('.content__tile.tile--blue').length <= 0){
            return true;
        }else{
            return false;
        }
    }
    
    busq.fn.alertsEmpty = function(){
         //Check if Alerts is empty
         if($('.content__tile-alert-list').length <= 0){
             return true;
         }else{
             return false;
         }
    }
    
    busq.fn.iwanttoEmpty = function(){
        //Check if I want to is empty
        if($('.iwantto').length === 0){
            return true;   
        }else{
            return false;
        }
    }
    
    busq.fn.homepageAlerts = function(){
        var eventsEmpty = busq.fn.eventsEmpty();
        var alertsEmpty = busq.fn.eventsEmpty();
        var iwanttoEmpty = busq.fn.eventsEmpty();
        
        var count = 0;
        $('.home__tiles-list-item').each(function(){
           count ++; 
        });
        
        if(eventsEmpty === true || alertsEmpty === true || iwanttoEmpty === true || count === 2){
            $('.home__tiles-list-item ').each(function(){
               $(this).removeClass('col-md-4').addClass('col-md-6'); 
            });
        }
    }
    
    if($('.home__tiles-list').length > 0){
        busq.fn.homepageAlerts();
    }
    
// Generate slider pagination

if ($('.carousel').length > 0) {
    var items = $('.carousel .item').length;
    var pagination = '';
        if (items > 1) {
        var sliderID = $('.carousel').attr('id');
        $('.carousel .item').each(function(index) {
            if (index === 0) {
                pagination = pagination + '<li href="#' + sliderID + '" data-target="#' + sliderID + '" data-slide-to="' + index + '" class="active"></li>';
            } else {
                pagination = pagination + '<li href="#' + sliderID + '" data-target="#' + sliderID + '" data-slide-to="' + index + '" class=""></li>';
            }
        });
        pagination = '<ol class="carousel-indicators">' + pagination + '</ol>';
        $($(pagination)).prependTo('#' + sliderID);
    }
}

})(jQuery);


/* EVENTS */

(function($){
    'use strict';

    // Clear values on event search tile
    busq.fn.eventsFormFilterClear = function(){
        var form = $('.events__filter .content__tile-form');
        var textFields = form.find('input[type="text"]');
        var hidden = form.find('input[type="hidden"]');
        var checkboxes = form.find('input[type="checkbox"]');
        var options = form.find('select');

        textFields.each(function(key, val) {
            $(val).val('');
            $(val).trigger('change');
        });
        hidden.each(function(key, val) {
            $(val).val('');
            $(val).trigger('change');
        });
        checkboxes.each(function(key, val) {
            $(val).prop('checked', false);
            $(val).trigger('change');
        });
        options.each(function(key, val) {
            $(val).val('');
            $(val).trigger('change');
        });
        busq.fn.eventsFormFilterSubmit();
        return false;
    };

    // Refine search based on form input
    busq.fn.eventsFormFilterSubmit = function(){
        var form = $('.search__form form');

        // Append values to hidden fields
        var hiddenDate = $('#queries_date_query-value');
        var hiddenFree = $('#event__free-value');
        var eventTopic = $('#elTopic'); // New field event topic.
        var eventHostType = $('#elHostType'); // New field event host type.

        hiddenDate.val($('.content__tile-form-datepicker').val());
        hiddenFree.val($('#event__free').prop('checked'));
        eventTopic.val($('#queries_topic_query').val());
        eventHostType.val($('#queries_host_type_query').val());

        // Submit the form
        form.submit();

        return false;
    };

    // Show all events by submitting an empty search
    busq.fn.eventsFormShowAll = function(){
        var form = $('.search__form form');
        busq.fn.eventsFormFilterClear();

        form.find('input[type="text"]').val('');

        form.submit();

        return false;
    };

    // if we have an events list, bind 'read more' links to submit google events 
    busq.fn.eventsAnalytics = function(event){
      var sLocation = event.data.location;
      ga('send', 'event', 'Calendar', sLocation, $(this).attr('data-track-value'));
      return true;   
    };
    
    // Toggle event details display
    busq.fn.eventsShowDetails = function(event){
        var target = $(event.target);
        var more, title, item, info;

        item = target.parents('.search__results-list-item');
        info = item.find('.events__item-information');

        if (target.hasClass('events__item-more')){
            more = target;
        } else{
            more = item.find('.events__item-more'); 
        }

        if(info.css('display') === 'block'){
            info.slideUp(400, function() {
                more.text('More...');                
            });
        } else {
            info.slideDown(400, function() {
                more.text('Less');                
            });          
            var intUrl = target.data('selfurl');
            if (intUrl) {
              ga('send', 'event', 'BusinessEvents', 'view', intUrl);              
            }
        }

        return false;
    };


    /* Used to copy the filter parameters to the hidden fields within the Search form */
    busq.fn.eventsCopyHiddenFields = function() {
        if ($('.content__tile-form select, .content__tile-form input').length) {
            $('.content__tile-form select, .content__tile-form input').change(function() {
                var elFilter = $(this);
                var elFilterFormEL = $('#' + elFilter.attr('rel'));

                if (elFilter.attr('id') === "event__free") {
                    if (elFilter.prop('checked') === true) {
                        elFilterFormEL.val("Free");
                    } else {
                        elFilterFormEL.val('');
                    }
                    elFilterFormEL.trigger('change');
                } else {
                    elFilterFormEL.val(elFilter.val()).trigger('change');
                }
            });
        }
    };
    busq.fn.eventsCopyHiddenFields();

    /* Used to copy the filter parameters from the URL to the filters on the page if they exist */
    busq.fn.eventsAssignURLFilters = function() {
        try {
            var aFilterIDs = ['queries_region_query', 'queries_industry_query_value', 'queries_eventtype_query'];

            $.extend({
                getUrlVars: function() {
                    var vars = [],
                        hash;
                    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
                    for (var i = 0; i < hashes.length; i++) {
                        hash = hashes[i].split('=');
                        vars.push(hash[0]);
                        vars[hash[0]] = decodeURIComponent(hash[1]);
                    }
                    return vars;
                },
                getUrlVar: function(name) {
                    return $.getUrlVars()[name];
                }
            });
            // Get object of URL parameters
            var aAllParams = $.getUrlVars();
            var elArray = $('.content__tile-form select, .content__tile-form input');

            for (var i = 0, lenI = aAllParams.length; i < lenI; i++) {
                var sParamValue = aAllParams[aAllParams[i]];
                if (sParamValue) {
                    switch (aAllParams[i]) {
                        case 'meta_EventCost':
                            if (sParamValue.includes('Free')) {
                                $('#event__free').prop('checked', true).trigger('change');
                            }
                            break;
                        case 'start_date':
                             $('#queries_date_query').val(sParamValue).trigger('change');
                            // $('#queries_date_query').trigger('change');
                            break;
                        case 'meta_EventRegion':
                            $('#queries_region_query').val(sParamValue.replace(/\+/g, ' ')).trigger('change');
                            break;
                        case 'meta_EventType':
                            $('#queries_eventtype_query').val(sParamValue).trigger('change');
                            break;
                        case 'meta_Industry':
                            $('#queries_industry_query').val(sParamValue).trigger('change');
                            break;
                        case 'meta_HostType':
                            $('#queries_host_type_query').val(sParamValue).trigger('change');
                            break;
                        default:
                            // Do nothing
                    }
                }
            }
        } catch (err) {
            //console.log(err.message);
        }
    };
    busq.fn.eventsAssignURLFilters();
    

    $('body').on('click', '.btn--clear-filters', busq.fn.eventsFormFilterClear);
    $('body').on('click', '.btn--refine-search', busq.fn.eventsFormFilterSubmit);
    $('body').on('click', '.btn--show-all-events', busq.fn.eventsFormShowAll);
    $('body').on('click', '.events__item-more', busq.fn.eventsShowDetails);
    $('body').on('click', '.event-track-external-link', { location: 'External' }, busq.fn.eventsAnalytics);
    $('body').on('click', '.event-track-internal-link', { location: 'Internal' }, busq.fn.eventsAnalytics);
    
    
    busq.fn.searchHighlight = function(){
        var searchTerm = $('.search__results-list').data('searchterm');
        
        if(searchTerm === undefined || searchTerm === null) {
        }
        else{
            var regExp = searchTerm.match(/\S+\s*/g);
            $(regExp).each(function(){
                this.replace(/^\s+|\s+$|\s+(?=\s)/g, "");
            });
            var replacement = '<strong>$&</strong>';
            
            $(regExp).each(function(){
                var query = this;
             
                $('.search__results-list-item').each(function(){
                    var html = $(this).find('.search__item-description').html();
                    var newhtml = html.replace(query, replacement);
                
                    $(this).find('.search__item-description').html(newhtml);
                });
            });
        }
        
        if($(".related-also").find("div").length > 0){
            
        }else{
            $(".related-also").addClass("visuallyhidden");
        }
    }
    
    if($('.search__results-list').length > 0){
        busq.fn.searchHighlight();
    }
    
    busq.fn.eventsMap = function(mapLocation){
        var map;
        function initialize(){
            
            var eventString = $('#event-map-canvas').attr('data-location');
            var eventCoords = eventString.replace(/[a-z]+=/g, '').replace(" ","").split(';');
       
            if(eventCoords[0].length > 0 && eventCoords[1].length > 0){
                var eventLoc = new google.maps.LatLng(eventCoords[0], eventCoords[1]);

                var mapOptions = {
                    center: eventLoc,
                    zoom: 15,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                  };
                var map = new google.maps.Map(document.getElementById("event-map-canvas"),
                          mapOptions);
                var marker = new google.maps.Marker({
                    position: eventLoc,
                    map: map
                });
            }else {
                $('#event-map-canvas').hide();
              }
        }
        
        $( document ).ready(function() {
            google.maps.event.addDomListener(window, "load", initialize);
        });


        
    }
    
    if($('#event-map-canvas').length > 0){
        busq.fn.eventsMap();
    }
    
    
    
    busq.fn.initAccordion = function(target){

        jQuery(target).accordion({
            active: false,
            collapsible: true, 
            heightStyle: "content",
            create: function(evt, ui) {
              try {
                var key = document.title + "_" + evt.target.parentElement.id;
                var value = parseInt(sessionStorage[key]);
                if (!isNaN(value)) 
                  jQuery(this).accordion("option", "active", value);
              } finally { } // ignore
            }
        });
    }

    if($('.accordion').length > 0){
        busq.fn.initAccordion('.accordion');    
    }
    
    if($('.accord_group').length > 0){
        busq.fn.initAccordion('.accord_group');    
    }
    
    var landingHeight;
    var accordionHeight;
    
    busq.fn.resetLandingAccordion = function(){
        $('.landing-accordion').css('overflow', 'initial').css('height','auto');
        landingHeight = $('.landing-accordion').height();
        $('.landing-accordion').removeClass('active');
        $('.landing-accordion-link').html('<span>Show more<i class="fa fa-chevron-down" aria-hidden="true"></i></span>');
        busq.fn.initLandingAccordion(); 
        console.log("Reset function called");
    }
    
    busq.fn.initLandingAccordion = function(){
        var currentWidth = busq.fn.determineWidth();
        
        if (currentWidth === 2){
            accordionHeight = '316px';//216
        }else{
            accordionHeight = '616px';//516
        }
        
        $('.landing-accordion').css('overflow', 'hidden').css('height',accordionHeight);
        console.log("Landing accordion initialised");
    }
    
    busq.fn.LandingAccordion = function(){
        if($('.landing-accordion').hasClass('active')){
           $('.landing-accordion').removeClass('active');
           $('.landing-accordion-link').html('<span>Show more<i class="fa fa-chevron-down" aria-hidden="true"></i></span>');
           $('.landing-accordion').css('height',accordionHeight);
        }else{
           $('.landing-accordion').height(landingHeight);
           $('.landing-accordion-link').html('<span>Show less<i class="fa fa-chevron-up" aria-hidden="true"></i></span>');
           $('.landing-accordion').addClass('active'); 
        }
    }
    
    if($('.landing-accordion').length > 0){
        
        
    }
    
    
    
    $('body').on('click', '.landing-accordion-link', busq.fn.LandingAccordion);
    
    
    if($('.content__welcome').length > 0){
       
        var countChar = $(".content__copy").text().length;

        if (countChar > 1000){ //700
            $('.content__welcome').addClass('landing-accordion');
            $('.content__copy').addClass('landing-accordion-target');
            $('.content__landing-header').append('<div class="landing-accordion-link"><span>Show more<i class="fa fa-chevron-down" aria-hidden="true"></i></span></div>');
            landingHeight = $('.landing-accordion').height();
            busq.fn.initLandingAccordion(landingHeight);
        }
    }
    
    
    
    var searchAccordionHeight;
    var searchfacetHeight;
    
    busq.fn.searchAccordioninit = function(searchfacetHeight){
         $('.facet-Industry').each(function(){
            var listItems = $(this).find('ul').children();
            var count = listItems.length;
            if (count > 10){
                searchfacetHeight = $(this).height();
                $(this).find('ul').addClass('accordion');
                
                searchAccordionHeight = '343px';
                
                $(this).find('ul').css('overflow', 'hidden').css('height',searchAccordionHeight);
                $(this).append('<div class="search-accordion-link"><span>Show more<i class="fa fa-chevron-down" aria-hidden="true"></i></span></div>');
            }
        });
    }
    
    busq.fn.searchAccordion = function(){
        if($('.facet-Industry').find('.accordion').hasClass('active')){
           $('.facet-Industry').find('.accordion').removeClass('active');
           $(this).html('<span>Show more<i class="fa fa-chevron-down" aria-hidden="true"></i></span>');
           $('.facet-Industry').find('.accordion').css('height',searchAccordionHeight);
        }else{
           $('.facet-Industry').find('.accordion').height(searchfacetHeight);
           $(this).html('<span>Show less<i class="fa fa-chevron-up" aria-hidden="true"></i></span>');
           $('.facet-Industry').find('.accordion').addClass('active'); 
        }
    }
    
    if($('.facet-Industry').length > 0){
        searchfacetHeight = $('.facet-Industry').find('ul').height();
        busq.fn.searchAccordioninit(searchfacetHeight);
    }
    
    $('body').on('click', '.search-accordion-link', busq.fn.searchAccordion);
    
    busq.fn.loadReportChart = function(past,soon,future,owner,other,id){
        google.charts.load('current', {packages: ['corechart']});
        google.charts.setOnLoadCallback(drawChart);
        var otherremaining;
        if(other >= (past + soon + future)){
            otherremaining =  other - (past + soon + future);
        }else{
            otherremaining = '0';
        }
        
        function drawChart() {
            
            var data = google.visualization.arrayToDataTable([
              ['Status', 'Count'],
              ['Expired', Number(past)],
              ['Upcoming', Number(soon)],
              ['Future', Number(future)],
              ['No review date', Number(otherremaining)]
            ]);
            
            var newTitle;
            if( owner.length > 0){
                newTitle = 'Current Metrics for ' + owner;
            }else{
                newTitle = 'Current Metrics';
            }
            
            var options = {
                //title: newTitle,
                colors: ['#b70c4b', '#fcb951', '#3caf9d', '#ffffff'],
                pieSliceText: 'none',
                legend: {
                    position: 'labeled',
                    fontSize: '12'
                },
                pieSliceTextStyle: {
                    fontSize: '15'
                },
                sliceVisibilityThreshold: 0,
            };
            
            var chart = new google.visualization.PieChart(document.getElementById(id));
            
            chart.draw(data, options);
            
            if( past === 0 && soon === 0 && future === 0){
                $('#' + id).hide();
            }
        }
    }
    
    
    busq.fn.getReportData = function(divid){
        var id = divid;
        if (id === 'piechart'){
            var past;
            if ( typeof($('.flags').data('past')) !== "undefined" && $('.flags').data('past') !== null ){
                past = $('.flags').data('past');
            }else{
                past = '0';
            }
            
            var soon;
            if ( typeof($('.flags').data('soon')) !== "undefined" && $('.flags').data('soon') !== null ){
                soon = $('.flags').data('soon');
            }else{
                soon = '0';
            }
            
            var future;
            if ( typeof($('.flags').data('future')) !== "undefined" && $('.flags').data('future') !== null ){
                future = $('.flags').data('future');
            }else{
                future = '0';
            }
    
            var owner;
            if ( typeof($('.flags').data('owner')) !== "undefined" && $('.flags').data('owner') !== null ){
                owner = $('.flags').data('owner');
            }else{
                owner = '';
            }
            
            var other;
            if ( typeof($('.search__count').data('count')) !== "undefined" ){
                other = $('.search__count').data('count');
            }
        }else{
            var past;
            if ( typeof($('.flagslive').data('past')) !== "undefined" ){
                past = $('.flagslive').data('past');
            }else{
                past = '0';
            }
            
            var soon;
            if ( typeof($('.flagslive').data('soon')) !== "undefined" ){
                soon = $('.flagslive').data('soon');
            }else{
                soon = '0';
            }
            
            var future;
            if ( typeof($('.flagslive').data('future')) !== "undefined" ){
                future = $('.flagslive').data('future');
            }else{
                future = '0';
            }
    
            var owner;
            if ( typeof($('.flagslive').data('owner')) !== "undefined"){
                owner = $('.flagslive').data('owner');
            }else{
                owner = '';
            }
            
            var other;
            if ( typeof($('.flagslive').data('all')) !== "undefined" ){
                other = $('.flagslive').data('all');
            }else{
                other = '';
            }
        }
        
        busq.fn.loadReportChart(past,soon,future,owner, other,id);
    }
    
    if($('#search_page_43959').length > 0){
        busq.fn.getReportData("piechart");
        busq.fn.getReportData("piechartlive");
    }
    
    if($('#search_page_215723').length > 0){
        busq.fn.getReportData("piechart");
        busq.fn.getReportData("piechartlive");
    }
    
    if($('body.global-content-owners #content_container_52042').length >0){
        busq.fn.getReportData("piechart"); 
    }
    //hide date picker when clicking away
    $(document).mouseup(function(e){
        var issued = $("#queries_date_issued_query_from_js_calendar_span");
        var reviewed = $("#queries_next_review_date_query_from_js_calendar_span");
        
        // if the target of the click isn't the container nor a descendant of the container
        if (!issued.is(e.target) && issued.has(e.target).length === 0){
            try {
                queries_date_issued_query_from_cal.hide();
            }
            catch(err) {
                //date picker not open. no action required
            }
        }
        if (!reviewed.is(e.target) && reviewed.has(e.target).length === 0){
            try {
                queries_next_review_date_query_from_cal.hide();
            }
            catch(err) {
                //date picker not open. no action required
            }
        }
       
    });
    
    //date picker year fix. changes input type of year to text, so the date picker js can target it
    var year_inputs = [$("[name=queries_date_issued_query_fromvalue\\[y\\]]"),$("[name=queries_date_issued_query_tovalue\\[y\\]]"),$("[name=queries_next_review_date_query_tovalue\\[y\\]]"),$("[name=queries_next_review_date_query_fromvalue\\[y\\]]")];
    year_inputs.forEach(function(input){
        input.attr("type","text")
    });
    
    jQuery(document).ready(function(){  
        if(navigator.userAgent.indexOf('Mac') > 0){
            jQuery('body').addClass('mac-os');
        } else {
         jQuery("body").addClass("win");
        }
    });
    
    busq.fn.InvestinggoogleMaps = function(){
        /* GOOGLE MAPS SCRIPT */
    
        var map;
    
       
            var styles = [
              {
                featureType: "road",
                elementType: "geometry",
                stylers: [
                  { lightness: 100 },
                  { visibility: "simplified" }
                ]
              },{
                featureType: "water",
                elementType: "all",
                stylers: [
                  { color: "#7fc0c8"},
                  { visibility: "on" }
                ]
              },{
                featureType: "poi",
                elementType: "park",
                stylers: [
                  { color: "#84ad53"},
                  { visibility: "simplified" }
                ]
              },{
                featureType: "landscape",
                elementType: "all",
                stylers: [
                  { color: "#CED3B8"},
                  { visibility: "on" }
                ]
              },{
                featureType: "road",
                elementType: "labels",
                stylers: [
                  { visibility: "off" }
                ]
              }
            ];
        
            var styledMap = new google.maps.StyledMapType(styles, {name: "Styled Map"});
            var mapOptions = {
                zoom: 4,
                center: new google.maps.LatLng(-21.394877,149.545654),
                mapTypeId: google.maps.MapTypeId.ROADMAP 
            };
            map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
            $('#map-canvas').css('height','315px');
            // needed to stop crazy messed up ghost images
            $('html > head').append('<style>#map-canvas img { max-width: none; }</style>');
            map.mapTypes.set('map_style', styledMap);
            map.setMapTypeId('map_style');
        
            var i;
        
            for (i=0; i < opportunities.length; i++) {
                //var myLatlng = new google.maps.LatLng(-25.363882,131.044922);
                var thisCoordSplit = opportunities[i].latlong.split(",");
                var myLat = thisCoordSplit[0];
                var myLong = thisCoordSplit[1];
                var myLocation = new google.maps.LatLng(myLat, myLong);
                var thisTitle = opportunities[i].name;
                
                var myPopup = new google.maps.InfoWindow({
                    maxWidth: "200",
                    content: "loading..."
                });
                var imageURL = $('.mapmarker').data('marker');
                var image = new google.maps.MarkerImage(imageURL,
                    // This marker is 29 pixels wide by 33 pixels tall.
                    new google.maps.Size(29, 33),
                    // The origin for this image is 0,0.
                    new google.maps.Point(0, 0)
                );
                var myMarker = new google.maps.Marker({
                    position: myLocation, 
                    map: map,
                    //icon: image, 
                    title: thisTitle, 
                    html: '<div id=\"oppWindow\"><h3>'+thisTitle+'</h3><p>'+opportunities[i].description+'</p><p><a href="'+opportunities[i].url+'" target=\'_blank\' onclick="_gaq.push([\'_trackEvent\',\'document\', \'download\', href]); _gaq.push([\'_trackPageview\', href]);";</a>Learn more about this opportunity</p></div>'
                });  
                google.maps.event.addListener(myMarker, 'click', function() {
                    myPopup.setContent(this.html);
                    myPopup.open(map,this);
                });
                google.maps.event.addListener(map, 'click', function() {
                    myPopup.close();
                });
            }
    
        
        

    }
    
    if ($('#map-canvas').length > 0 ){ 
   
        setTimeout(function(){ 
            if (typeof google === 'object' && typeof google.maps === 'object') {
                busq.fn.InvestinggoogleMaps();
            }
        }, 5000);
    }
    
    
    busq.fn.specialAutocomplete = function(){
        
        $.getScript("//deedi-search.clients.squiz.net/s/resources-global/js/jquery.funnelback-completion.js"); 
        // Query completion setup.
        jQuery("input.query").fbcompletion({
            'enabled' : 'enabled',
            'standardCompletionEnabled': true,
            'collection' : 'business-qld-meta',
            'program' : 'https://deedi-search.clients.squiz.net/s/suggest.json',
            //'program' : program,
            'interactionLog' : 'https://deedi-search.clients.squiz.net/s/log',
            'format' : 'extended',
            'alpha' : '.5',
            'show' : '10',
            'sort' : '0',
            'length' : '3',
            'delay' : '0',
            'profile' : '',
            //'query' : 'collection=dtesb-etender',
            'logging' : 'disabled',
            //Search based completion
            'searchBasedCompletionEnabled': false,
            'searchBasedCompletionProgram': 'https://deedi-search.clients.squiz.net/s/suggest.json',
            //'searchBasedCompletionProgram': program
        });

    }
    
    if( $('.special-page').length > 0){
        busq.fn.specialAutocomplete();
    }
    
    
    busq.fn.formValidate = function(){
      
        $(".form-validate").validate({
            ignore:":hidden",
            errorPlacement: function(error, element) {
        		$( element ).closest('.sq-form-question').append(error);
        	},
        	rules: {
                field: {
                  required: true,
                  email: true,
                  number: true
                }
            } /*,
            submitHandler: function(form) {
                    
                    var form = $('#form_email_1601');
                    var formData = form.serialize();
                    var formSubmit = form.find('input[type="submit"]');
                    // process the form
                    $.ajax({
                        type: 'POST',
                        url: form.attr('action'),
                        data: formData,
                        success: function (response) {
                            
                            $('.modal-body').html(response);
                            
                            feedbackCloseModal();
                        }
                    });
                        
                }*/
        });
    }
    
    if( $('.form-validate').length > 0){
        busq.fn.formValidate();
    }
    
    if( $('#eligibility-alert').length > 0 || $('#program-details').length > 0) {
        
      insertCommas('eligibility-alert');
      insertCommas('program-details');
    
    }
    
    
    function insertCommas(id) {
    
      $('#' + id + ' .check-commas .value').each(function() {
        var str = $(this).text();
        $(this).text($.trim(str));
    
        if($(this).text() == '') {
          $(this).remove();
        }
    
      });
    
      var str = $('#' + id + ' .check-commas .value').last().text();
      $('#' + id + ' .check-commas .value').last().text(str.replace(',', ''));
    
      if($('#' + id + ' .check-commas .value').length > 1) {
        var str = $('#' + id + ' .check-commas .value').last().prev().text();
        $('#' + id + ' .check-commas .value').last().prev().text(str.replace(',', ''));
    
        var str = $('#' + id + ' .check-commas .value').last().text();
        $('#' + id + ' .check-commas .value').last().text('and ' + str);
      }
    
      //replace the first character of the first value with an uppercase version
      var node = $('#' + id + ' .check-commas .value:first');
      var nodeText = $(node).text();
      $(node).text(nodeText.charAt(0).toUpperCase() + nodeText.slice(1));
    }

    
    busq.fn.reportCustomise = function(){
        
        if($("#queries_name_query").length > 0){
            document.getElementById("queries_name_query").placeholder = "Search by name";
        }
        
        if($("#queries_username_query").length > 0){
            document.getElementById("queries_username_query").placeholder = "Search by username";
        }
        
        if($("#queries_excludetype_query").length > 0){
            //$("#queries_type_query").prepend('<option value="">-- Leave Empty --</option>');
            if (getParameterByName('queries_excludetype_query') === "" || getParameterByName('queries_excludetype_query') === null) {
                $("#queries_excludetype_query").val("").prop('selected', true);
            }
        }
        
        if($("#queries_type_query").length > 0){
            //$("#queries_type_query").prepend('<option value="">-- Leave Empty --</option>');
            if (getParameterByName('queries_type_query') === "" || getParameterByName('queries_type_query') === null) {
                $("#queries_type_query").val("").prop('selected', true);
            }
        }
        
        if($("#queries_layout_query").length > 0){
            $("#queries_layout_query").prepend('<option value="">-- Leave Empty --</option>');
            if (getParameterByName('queries_layout_query') === "" || getParameterByName('queries_layout_query') === null) {
                $("#queries_layout_query").val("").prop('selected', true);
            }
        }
        
        if($("#category_status").length >0){
            if (getParameterByName('category_status') != "" && getParameterByName('category_status') != null) {
                var selectedVal = getParameterByName('category_status');
                $("#category_status").val(selectedVal).prop('selected', true);
                
            }
        }
        
        if($("#queries_owner_query").length > 0){
            if (getParameterByName('queries_owner_query') != "" && getParameterByName('queries_owner_query') != null) {
                
                var selectedVal = getParameterByName('queries_owner_query');
                $("#queries_owner_query").val(selectedVal).prop('selected', true);
                document.querySelector('#queries_owner_query [value="' + selectedVal + '"]').selected = true;
            }
        }
        
        function getParameterByName(name, url) {
            
            if (!url) {
              url = window.location.href;
            }
       
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        }
        
        if (getParameterByName('queries_layout_query') === "" || getParameterByName('queries_layout_query') === null) {
           $("#queries_layout_query").prepend('<option value="" selected="selected">- Select -</option>');
        }
    }
    
    if($('.content-type-report').length > 0){
        busq.fn.reportCustomise();
    }
    
    // Event tracking for the ask a question feedback form
    $('#question-btn').on('click', function() {
      ga('send', 'event', 'Feedback (Ask a question)', 'Load');
    });
    // Event tracking for the report an issue feedback form
    $('#issue-btn').on('click', function() {
      ga('send', 'event', 'Feedback (Report an issue)', 'Load');
    });
    
    busq.fn.preventEnterDiscoverForm = function(){
        $(window).keydown(function(event){
            if(event.keyCode == 13) {
              event.preventDefault();
              return false;
            }
          });    
    }
    
    if ($("form#form_email_3121").length > 0){
        busq.fn.preventEnterDiscoverForm();
    }
    
    
    // Load the PDD image
    busq.fn.pddModalImage = function() {
        $('.species-carousel-item').click(function() {
            var targeturl = $(this).data('targeturl');
            var modalWrapper = $('#pddModal').find('.modal-body');
            modalWrapper.load(targeturl, function() {
                modalWrapper.addClass('in');
            });
        });
    };
    
    if($(".species-carousel-item").length > 0){
        busq.fn.pddModalImage();
    }

    
    busq.fn.tabletMegaMenu = function(){
        $(".header__navigation--list-item a").on("click", function(evt){
            if($(this).hasClass('active')){
                
            }else{
                evt.preventDefault();
                $(".header__navigation--list-item a").removeClass("active");
                $(this).addClass("active");
            }
        });
    }
    
    var ua = navigator.userAgent;
    var isiPad = /iPad/i.test(ua) || /iPhone OS 3_1_2/i.test(ua) || /iPhone OS 3_2_2/i.test(ua);
    
    if (isiPad){  
        //if iPad
        busq.fn.tabletMegaMenu();
    }else{
        
    }
    
    // Event disclaimer checkbox.
    $('.event-disclaimer-field').on('click', function() {
        var checked = document.getElementById('event-disclaimer-checkbox').checked;
    
        if(checked) {
            $('.event-section-texts, .event-disclaimer-field, .event-disclaimer-field__texts').addClass('hidden');
            $('.event-section__details').fadeIn(1000).removeClass('hidden');
            $('.event-disclaimer-field__texts--ticked').insertAfter('.event-section__details #page_title');
        } else {
            $('.event-section-texts, .event-disclaimer-field, .event-disclaimer-field__texts').removeClass('hidden');
            $('.event-section__details').addClass('hidden');
        }
    });

}(jQuery));

var bqfb = {
    fn: {},
    vars: {},
    search: {}
};

(function($) {
    'use strict';

    //Debounce function so we can slow down the autocomplete
    function debounce(func, wait, immediate) {
        var timeout;
        return function() {
            var context = this,
                args = arguments;
            var later = function() {
                timeout = null;
                if (!immediate) {
                    func.apply(context, args);
                }
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) {
                func.apply(context, args);
            }
        };
    }

    //
    // Funnelback auto suggestions
    //


    // Adding a wrapper so it doesn't break when elements are missing
    if ($('#ablisquery').length > 0) {
        bqfb.ablisLabelID = $('#ablisquery').attr('data-meta-ablis-label');
        bqfb.ablisDataID = $('#ablisquery').attr('data-meta-ablis-data');
        bqfb.autocompleteURL = $('#ablisquery').attr('data-autocompleteURL');


        //Saved values
        var ablisData = $('#' + bqfb.ablisDataID).val().split(';');
        var ablisLabels = $('#' + bqfb.ablisLabelID).val().split(';');


        //Some checks to see if the arrays are already empty, double make sure they're empty
        if (ablisData[0].length === 0) {
            ablisData = [];
        }

        if (ablisLabels[0].length === 0) {
            ablisLabels = [];
        }

        var theRequest = '';
        var fb_completion = {
            enabled: 'true',
            program: bqfb.autocompleteURL,
            parentSelector: 'form',
            alpha: '.5',
            show: 50,
            sort: '0',
            length: '3',
            delay: 150,
            searchSelector: 'ablisquery',
            /* The selector for the search input field */
            suggestionSelector: '.autocomplete--results' /* The selector for the suggestion box. Expects an ID or class name */
        };
    }


    // this function does a quick check over how may characters are present
    // in the search query.
    bqfb.search.loadSuggestions = function(event) {

        var searchVal = event.currentTarget.value;

        // if the search query is greater than x characters, start the search
        if (searchVal.length >= fb_completion.length) {
            bqfb.search.searchSuggestions(searchVal, event.currentTarget);
        } else { // if it's less than x then close the suggestion box
            bqfb.search.closeSuggestions();
        }

    };

    bqfb.search.replace = function(name) {
        return name.replace(/_/g, ",");
        //return name;
    };


    // the main function to load the search results
    // this function is expecting the search field text value to be passed
    bqfb.search.searchSuggestions = function(searchVal, element) {
            // store the search term
            theRequest = searchVal;
            var $this = $(element);
            // combine the URL params to a variable
            var theURL = fb_completion.program; /* + theRequest.replace(/ /g, '+');*/
            var formData = $this.serialize();
            formData = formData.replace('ablisquery', 'partial_query');
            var xhr = $.ajax({
                type: 'GET',
                url: theURL + '&' + formData,
                success: function(data) {

                    //var $data = JSON.parse(data);
                    var $results = data;
                    var $uniqueResults = [];

                    var $wrapper = $this.parents('form').find($(fb_completion.suggestionSelector));
                    var $suggestionslist = $('.ablis-suggestion-list');
                    $suggestionslist.html('');

                    //If there's nothing, hide the box
                    if ($results.length < 1) {
                        $wrapper.addClass('hide');
                        $('.autocomplete--moremessage').addClass('hide');
                    }

                    // some cleanup code
                    $.each($results, function(i, el) {
                        //remove dupes
                        if ($.inArray(el, $uniqueResults) === -1) {
                            $uniqueResults.push(el);
                        }

                        //remove odd extras funnelback is throwing in (weighting !== 90)
                        if (el.wt !== "90") {
                            $uniqueResults.splice($.inArray(el, $uniqueResults), 1);
                        }

                    });

                    //
                    if ($uniqueResults.length > 0) {

                        for (var i = 0; i < $uniqueResults.length; i++) {
                            if (i < fb_completion.show) {

                                //Find category
                                var catID = $uniqueResults[i].cat.replace(/ /g, '').replace(/&amp;/g, '');

                                //Find things
                                var code = $uniqueResults[i].disp.code
                                var name = $uniqueResults[i].disp.name
                                var synonym = $uniqueResults[i].disp.synonym

                                //Find search term
                                var term = theRequest;

                                //Boldersize search term
                                if (typeof(name) != 'undefined') {
                                    if (name.toLowerCase().indexOf(term) >= 0) {
                                        var regEx = new RegExp(term, "ig");
                                        var replacement = '<strong>$&</strong>';
                                        var boldName = name.replace(regEx, replacement);
                                    } else {
                                        var boldName = name;
                                    }
                                }



                                $('<li class="ablis-suggestion"><input type="checkbox" name="' + name + '" id="ablis-' + code + '" value="' + code + '" />  <label for="ablis-' + code + '"><span class="ablis-hidden-code">[' + code + ']</span>' + bqfb.search.replace(boldName) + '</a></li>').appendTo($suggestionslist);

                                //Tick anything already in the array
                                $.each(ablisData, function(key, value) {
                                    $('input#ablis-' + value + '').prop('checked', true);
                                });
                            }
                        }
                        // now add the compiled suggestions into the page and show if hidden
                        if ($suggestionslist.length > 0) {

                            // Unhide the whole list
                            $('.autocomplete--results').removeClass('hide').scrollTop(0);

                        }

                        //Show a message if you need to scroll the results
                        if ($uniqueResults.length > 6) {
                            $('.autocomplete--moremessage').removeClass('hide');
                        } else {
                            $('.autocomplete--moremessage').addClass('hide');
                        }

                    } else {
                        $wrapper.addClass('hide');
                        $('.autocomplete--moremessage').addClass('hide');
                    }

                }
            });

            //fix for focusout issue
            $this.parents('form').find('input').each(function() {
                if ($(this).hasClass('ui-autocomplete-input')) {

                } else {
                    $(this).click(function() {
                        $('.autocomplete--results').addClass('hide');
                        $('.autocomplete--moremessage').addClass('hide');
                        
                    });
                }
            });

        } // end searchSuggestions() function


    bqfb.search.ablisRemoval = function(itemdata, itemlabel) {

        //Unchecked deal with the data field
        ablisData.splice($.inArray(itemdata, ablisData), 1);
        $('#' + bqfb.ablisDataID).val(ablisData);

        //Unchecked deal with the label field
        ablisLabels.splice($.inArray(itemlabel, ablisLabels), 1);
        //var updatedablisLabels = ablisLabels.replace(/_/g,',');
        $('#' + bqfb.ablisLabelID).val(ablisLabels);

        //Replace commas with semicolons
        $('.ablis-input').each(function(key, value) {
            var thisvalue = $(this).val();
            $(this).val(thisvalue.replace(/,/g, ';'))
        });
        //Replace underscores with commas
        $('.ablis-input').each(function(key, value) {
            var thisvalue = $(this).val();
            $(this).val(thisvalue.replace(/_/g, ','))
        });

    }




    bqfb.fn.ablisAdd = function(itemdata, itemlabel) {

        //Add item to the data field
        ablisData.push(itemdata);
        $('#' + bqfb.ablisDataID).val(ablisData);

        console.log('test');

        //Add item to the label field
        ablisLabels.push(itemlabel);
        $('#' + bqfb.ablisLabelID).val(ablisLabels);
    }

    // when a user selects an option from autocomplete
    bqfb.search.ablisSelected = function() {

        var $checkbox = $(this).find('input');

        var itemdata = $checkbox.val();
        var itemlabel = $checkbox.attr('name');

        if ($checkbox.prop('checked')) {
            bqfb.fn.ablisAdd(itemdata, itemlabel);
        } else {
            bqfb.search.ablisRemoval(itemdata, itemlabel);
        }

        //Enable the Edit+ Button
        $('#ees_saveButtonAction').removeClass('disabled');

        //Replace commas with semicolons
        $('.ablis-input').each(function(key, value) {
            var thisvalue = $(this).val();
            $(this).val(thisvalue.replace(/,/g, ';'))
        });
        //Replace underscores with commas
        $('.ablis-input').each(function(key, value) {
            var thisvalue = $(this).val();
            $(this).val(thisvalue.replace(/_/g, ','))
        });

        //Clean out current options list
        $('.ablis-current-options-list').html('');


        bqfb.fn.updateAblisOptions();

    }

    bqfb.fn.updateAblisOptions = function() {
        //console.log(ablisLabels);
        //Update the options list
        $(ablisLabels).each(function(key, value) {
            var ablisDataItem = ablisData[key];
            var html = '<li class="' + ablisDataItem + '">' + bqfb.search.replace(value) + '<a href="#" class="ablis-remove" data-ablislabel="' + value + '" data-abliscode="' + ablisDataItem + '"><i class="fa fa-minus-circle" aria-hidden="true"></i></a></li>';
            $('.ablis-current-options-list').append(html);
        });
    }

    bqfb.fn.bindAblisRemove = function() {
        $('body').on('click', '.ablis-remove', function(key, value) {

            //Remove the options from the inputs
            var itemlabel = $(this).attr('data-ablislabel');
            var itemdata = $(this).attr('data-abliscode');
            bqfb.search.ablisRemoval(itemdata, itemlabel);

            //Remove this item from the list
            $(this).parent('li').remove();

            //Uncheck the item if the autocomplete box still exists
            $('#ablis-' + itemdata).prop('checked', false);

            //Enable the Edit+ Button
            $('#ees_saveButtonAction').removeClass('disabled');

            return false;
        });

        
    }

 
    // function to close the suggestion box
    bqfb.search.closeSuggestions = function() {
        // hide only if visible and clear the html
        $(fb_completion.suggestionSelector).filter(':visible').addClass('hide').find('.section ul').html('');
        $('.autocomplete--moremessage').addClass('hide');
    }



    //To prepopulate the Business Stage from storage on the 'Discover what you need' page
    bqfb.fn.prePopulateBusinessStage = function(objDiscover) {
          if (objDiscover) {
            var sBusinessStage = objDiscover.audience.business_stage;
            if (sBusinessStage) {
                var elConsidering = $('#q3143_q2_0'),
                    elStarting = $('#q3143_q2_1'),
                    elRunning = $('#q3143_q2_2'),
                    elGrowing = $('#q3143_q2_3'),
                    elClosing = $('#q3143_q2_4'),
                    objBusinessStage = {
                        considering: elConsidering,
                        starting: elStarting,
                        running: elRunning,
                        growing: elGrowing,
                        closing: elClosing
                    };

                var aValues = sBusinessStage.split(';'),
                    val;
                while (aValues.length) {
                    val = aValues.shift();
                    $.each(objBusinessStage, function(k, v) {
                        if (k === val && v.length) {
                            v.prop('checked', true).trigger('change');
                            return false;
                        }
                    });
                }
                return objDiscover;
            }
        } else {
          
            return false;
        }
    };



    //To prepopulate the Business Size from storage on the 'Discover what you need' page
    bqfb.fn.prePopulateStaff = function(objDiscover) {
        if (objDiscover) {
            var sStaff = objDiscover.audience.business_size;
            if (sStaff) {
                var elZero = $('#q3143_q3_0'),
                    elUpTo_4 = $('#q3143_q3_1'),
                    elUpTo_19 = $('#q3143_q3_2'),
                    elUpTo_199 = $('#q3143_q3_3'),
                    elMoreThan_200 = $('#q3143_q3_4'),
                    objStaff = {
                        zero: elZero,
                        '1_to_4': elUpTo_4,
                        '5_to_19': elUpTo_19,
                        '20_to_199': elUpTo_199,
                        '200_plus': elMoreThan_200
                    },
                    changed = false;

                $.each(objStaff, function(k, v) {
                    if (k === sStaff && v.length) {
                        v.prop('checked', true).trigger('change');
                        changed = true;
                        return false;
                    }
                });
                return objDiscover;
            }
        } else {
            return false;
        }
    };


    //To prepopulate the Business Location & Region in within Queensland from storage on the 'Discover what you need' page
    bqfb.fn.prePopulateLocation = function(objDiscover) {
        if (objDiscover) {
            var sLocation = objDiscover.audience.business_location;
            if (sLocation) {
                var elQueensland = $('#q3143_q4_0'),
                    elInterstate = $('#q3143_q4_1'),
                    elOverseas = $('#q3143_q4_2'),
                    objLocation = {
                        interstate: elInterstate,
                        overseas: elOverseas,
                        queensland: elQueensland
                    },
                    elRegion = $('#q3143_q5'),
                    aRegion = busq.vars.regions,
                    changed = false;

                $.each(objLocation, function(k, v) {
                    if (sLocation === 'queensland') {
                        if (v.length) {
                            v.prop('checked', true).trigger('change');
                            var sRegion = objDiscover.audience.business_region;

                            if (sRegion) {
                                for (var i = aRegion.length - 1; i >= 0; i--) {
                                    if (aRegion[i] === sRegion) {
                                        elRegion.val(sRegion).trigger('change');
                                        break;
                                    }
                                }
                            }
                            changed = true;
                        }
                    } else {
                        if (k === sLocation && v.length) {
                            v.prop('checked', true).trigger('change');
                            changed = true;
                        }
                    }
                });
                return objDiscover;
            }
        } else {
            return false;
        }
    };


    //To prepopulate the Business Industry from storage on the 'Discover what you need' page
    bqfb.fn.prePopulateABLIS = function(objDiscover) {
        if (objDiscover) {
            //Adding a conditional so we don't show 'All Businesses'
            if (objDiscover.audience.business_industry != 'Z') {
                var arrKeys = objDiscover.audience.business_industry.split(';'),
                    arrValues = objDiscover.audience.business_industry_value.split(';');
                if (arrKeys.length === arrValues.length) {
                    for (var i = 0, len = arrKeys.length; i < len; i++) {
                        bqfb.fn.ablisAdd(arrKeys[i], arrValues[i]);
                    }
                }
                // bqfb.fn.updateAblisOptions();
                return objDiscover;
            }
        } else {
            return false;
        }
    };


    //To prepopulate the form fields from storage on the 'Discover what you need' page
    bqfb.fn.prePopulateDiscoverForm = function(objDiscover) {
        if ($('#form_email_3121').length) {
            bqfb.fn.prePopulateBusinessStage(objDiscover);
            bqfb.fn.prePopulateStaff(objDiscover);
            bqfb.fn.prePopulateLocation(objDiscover);
            bqfb.fn.prePopulateABLIS(objDiscover);
        } else {
            return false;
        }
    };


    //Check if we're on the front end
    if (typeof busq !== 'undefined') {
      bqfb.fn.prePopulateDiscoverForm(busq.fn.getStorageObject('userinfo'));
    }


    $(document).ready(function() {
        //console.log('document is ready!');
  
        // Adding a wrapper so it doesn't break when elements are missing
        if ($('#ablisquery').length > 0) {
            // initialise auto suggestion
            $('input[name="' + fb_completion.searchSelector + '"]').each(function(key, value) {
                var $this = $(this);

                // make sure auto suggestion is enabled
                if (fb_completion.enabled === 'true') {
                    var suggestionClassName = fb_completion.suggestionSelector.substr(1);
                }
            });

            //Define a debounce function to slow this down
            var debouncedAutocomplete = debounce(function(event) {
                bqfb.search.loadSuggestions(event);
            }, fb_completion.delay);


            //
            // init various event functions
            //
            // on key up or focus - run some checks before querying search
            $('input[name="' + fb_completion.searchSelector + '"]').on('keyup focus', debouncedAutocomplete);


            // user has clicked on a text only suggestion
            $(fb_completion.suggestionSelector).on('change', '.ablis-suggestion', bqfb.search.ablisSelected);


            // close suggestion box if user clicks elsewhere
            $('html').bind("click touchstart", function(ele) {
                if ($(ele.target).parents(fb_completion.parentSelector).length > 0) {
                    //  ele.stopPropagation();
                    //console.log('here');
                } else {
                    bqfb.search.closeSuggestions();
                }
            });

            //Bind remove items with icon
            bqfb.fn.bindAblisRemove();

            //Update the ABLIS Options list
            bqfb.fn.updateAblisOptions();
        }

    });

    $('#form_email_3121_reset').on('click', function() {
        $('.ablis-remove').trigger('click');
        console.log()
    });

})(jQuery);

